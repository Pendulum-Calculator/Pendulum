{"version":3,"sources":["../../js/canvas/locator.ts"],"names":["Locator","lc","scalex","scaley","scalez","deltax","deltay","deltaz","A","B","_standardMatrix","_graphicalMatrix","_subtractionMatrix","virCoord","checkCoord","coord","utility","dot","virtualToStandard","X","Y","Z","width","getElement","subtract","virtualToGraphical","slice","height","length","Ainverse","inv","error","Error","graCoord","Width","Height","Length","pinX","factorx","pinY","factory","pinZ","factorz","pinxyz","xyz"],"mappings":";;;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;AACA;IACMA,O;;;AAEF;AAEA;AAGA;AAEA;AAGA;;AACA;;;;AAMA;;;AAIA,qBAAc;AAAA;;AAAA,SAtBdC,EAsBc,GAtBT,IAsBS;AAAA,SApBdC,MAoBc,GApBL,CAoBK;AAAA,SAlBdC,MAkBc,GAlBL,CAkBK;AAAA,SAjBdC,MAiBc,GAjBL,CAiBK;AAAA,SAfdC,MAec,GAfL,CAeK;AAAA,SAbdC,MAac,GAbL,CAaK;AAAA,SAZdC,MAYc,GAZL,CAYK;AAAA,SAPdC,CAOc,GAPV,CAAC,CAAC,IAAD,EAAO,CAAP,EAAU,CAAV,CAAD,EACJ,CAAC,CAAD,EAAI,IAAJ,EAAU,CAAV,CADI,EAEJ,CAAC,CAAD,EAAI,CAAJ,EAAO,IAAP,CAFI,CAOU;AAAA,SADdC,CACc,GADV,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CACU;AAAA,SAENC,eAFM,GAEY,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAFZ;AAAA,SAyBNC,gBAzBM,GAyBa,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAzBb;AAAA,SAuENC,kBAvEM,GAuEe,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAvEf;AACb;;;;;AAED;;;;sCAI0BC,Q,EAA8B;AACpD,WAAKC,UAAL,CAAgBD,QAAhB;AACA,WAAKH,eAAL,CAAqB,CAArB,IAA0B,CAACG,QAAQ,CAAC,CAAD,CAAR,GAAc,KAAKR,MAApB,IAA8B,KAAKH,MAA7D;AACA,WAAKQ,eAAL,CAAqB,CAArB,IAA0B,CAACG,QAAQ,CAAC,CAAD,CAAR,GAAc,KAAKP,MAApB,IAA8B,KAAKH,MAA7D;AACA,WAAKO,eAAL,CAAqB,CAArB,IAA0B,CAACG,QAAQ,CAAC,CAAD,CAAR,GAAc,KAAKN,MAApB,IAA8B,KAAKH,MAA7D;AACA,aAAO,KAAKM,eAAZ;AACH,K,CACD;;;;wBACqC;AAAA,wCAAzBK,KAAyB;AAAzBA,QAAAA,KAAyB;AAAA;;AACjC,aAAOC,OAAO,CAACC,GAAR,CAAY,KAAKT,CAAL,CAAO,CAAP,CAAZ,EAAuB,KAAKU,iBAAL,CAAuBH,KAAvB,CAAvB,IAAwD,KAAKN,CAAL,CAAO,CAAP,CAA/D;AACH,K,CACD;;;;wBACqC;AAAA,yCAAzBM,KAAyB;AAAzBA,QAAAA,KAAyB;AAAA;;AACjC,aAAOC,OAAO,CAACC,GAAR,CAAY,KAAKT,CAAL,CAAO,CAAP,CAAZ,EAAuB,KAAKU,iBAAL,CAAuBH,KAAvB,CAAvB,IAAwD,KAAKN,CAAL,CAAO,CAAP,CAA/D;AACH;;;wBACoC;AAAA,yCAAzBM,KAAyB;AAAzBA,QAAAA,KAAyB;AAAA;;AACjC,aAAOC,OAAO,CAACC,GAAR,CAAY,KAAKT,CAAL,CAAO,CAAP,CAAZ,EAAuB,KAAKU,iBAAL,CAAuBH,KAAvB,CAAvB,IAAwD,KAAKN,CAAL,CAAO,CAAP,CAA/D;AACH;;;uCAE0BI,Q,EAA8B;AACrD,WAAKF,gBAAL,CAAsB,CAAtB,IAA2B,KAAKQ,CAAL,gCAAUN,QAAV,EAA3B;AACA,WAAKF,gBAAL,CAAsB,CAAtB,IAA2B,KAAKS,CAAL,gCAAUP,QAAV,EAA3B;AACA,WAAKF,gBAAL,CAAsB,CAAtB,IAA2B,KAAKU,CAAL,gCAAUR,QAAV,EAA3B;AACA,aAAO,KAAKF,gBAAZ;AACH;AACD;;;;;;;;;0BAMaW,K,EAAeC,U,EAAqC;AAC7D,UAAIA,UAAJ,EAAgB;AACZ,eAAO,KAAKJ,CAAL,CAAOG,KAAP,EAAc,CAAd,EAAiB,CAAjB,IAAsB,KAAKH,CAAL,CAAO,CAAP,EAAU,CAAV,EAAa,CAAb,CAA7B;AACH,OAFD,MAEO;AACH,eAAQH,OAAO,CAACQ,QAAR,CAAiB,KAAKC,kBAAL,CAAwB,CAACH,KAAD,EAAQ,CAAR,EAAW,CAAX,CAAxB,EAAuCI,KAAvC,EAAjB,EAAiE,KAAKD,kBAAL,CAAwB,CAACH,KAAD,EAAQ,CAAR,EAAW,CAAX,CAAxB,CAAjE,CAAR;AACH;AACJ;AACD;;;;;;;;;2BAMcK,M,EAAgBJ,U,EAAqC;AAC/D,UAAIA,UAAJ,EAAgB;AACZ,eAAO,KAAKH,CAAL,CAAO,CAAP,EAAUO,MAAV,EAAkB,CAAlB,IAAuB,KAAKP,CAAL,CAAO,CAAP,EAAU,CAAV,EAAa,CAAb,CAA9B;AACH,OAFD,MAEO;AACH,eAAQJ,OAAO,CAACQ,QAAR,CAAiB,KAAKC,kBAAL,CAAwB,CAAC,CAAD,EAAIE,MAAJ,EAAY,CAAZ,CAAxB,EAAwCD,KAAxC,EAAjB,EAAkE,KAAKD,kBAAL,CAAwB,CAAC,CAAD,EAAIE,MAAJ,EAAY,CAAZ,CAAxB,CAAlE,CAAR;AACH;AACJ;AACD;;;;;;;;;2BAMcC,M,EAAgBL,U,EAAqC;AAC/D,UAAIA,UAAJ,EAAgB;AACZ,eAAO,KAAKF,CAAL,CAAO,CAAP,EAAU,CAAV,EAAaO,MAAb,IAAuB,KAAKP,CAAL,CAAO,CAAP,EAAU,CAAV,EAAa,CAAb,CAA9B;AACH,OAFD,MAEO;AACH,eAAQL,OAAO,CAACQ,QAAR,CAAiB,KAAKC,kBAAL,CAAwB,CAAC,CAAD,EAAI,CAAJ,EAAOG,MAAP,CAAxB,EAAwCF,KAAxC,EAAjB,EAAkE,KAAKD,kBAAL,CAAwB,CAAC,CAAD,EAAI,CAAJ,EAAOG,MAAP,CAAxB,CAAlE,CAAR;AACH;AACJ;;;;AAED;;;;;;;0BAO4C;AACxC,UAAIC,QAAJ;;AACA,UAAI;AACAA,QAAAA,QAAQ,GAAGb,OAAO,CAACc,GAAR,CAAY,KAAKtB,CAAjB,CAAX;AACH,OAFD,CAEE,OAAOuB,KAAP,EAAc;AACZ,cAAM,IAAIC,KAAJ,CAAU,4FAAV,CAAN;AACH;;AANuC,yCAA9BC,QAA8B;AAA9BA,QAAAA,QAA8B;AAAA;;AAOxC,WAAKnB,UAAL,CAAgBmB,QAAhB;AACA,WAAKrB,kBAAL,GAA2BI,OAAO,CAACQ,QAAR,CAAiBS,QAAjB,EAA2B,KAAKxB,CAAhC,CAA3B;AACA,WAAKC,eAAL,CAAqB,CAArB,IAA0BM,OAAO,CAACC,GAAR,CAAYY,QAAQ,CAAC,CAAD,CAApB,EAAyB,KAAKjB,kBAA9B,CAA1B;AACA,WAAKF,eAAL,CAAqB,CAArB,IAA0BM,OAAO,CAACC,GAAR,CAAYY,QAAQ,CAAC,CAAD,CAApB,EAAyB,KAAKjB,kBAA9B,CAA1B;AACA,WAAKF,eAAL,CAAqB,CAArB,IAA0BM,OAAO,CAACC,GAAR,CAAYY,QAAQ,CAAC,CAAD,CAApB,EAAyB,KAAKjB,kBAA9B,CAA1B;AACA;;;;AAGA,WAAKA,kBAAL,CAAwB,CAAxB,IAA6B,KAAKF,eAAL,CAAqB,CAArB,IAA0B,KAAKR,MAA/B,GAAwC,KAAKG,MAA1E;AACA,WAAKO,kBAAL,CAAwB,CAAxB,IAA6B,KAAKF,eAAL,CAAqB,CAArB,IAA0B,KAAKP,MAA/B,GAAwC,KAAKG,MAA1E;AACA,WAAKM,kBAAL,CAAwB,CAAxB,IAA6B,KAAKF,eAAL,CAAqB,CAArB,IAA0B,KAAKN,MAA/B,GAAwC,KAAKG,MAA1E;AACA,aAAO,KAAKK,kBAAZ;AACH;AAED;;;;;;;0BAIasB,K,EAAuB;AAChC,aAAOA,KAAK,GAAG,KAAK1B,CAAL,CAAO,CAAP,EAAU,CAAV,CAAR,GAAuB,KAAKN,MAAnC;AACH;AACD;;;;;;;2BAIciC,M,EAAwB;AAClC,aAAOA,MAAM,GAAG,KAAK3B,CAAL,CAAO,CAAP,EAAU,CAAV,CAAT,GAAwB,KAAKL,MAApC;AACH;AACD;;;;;;;2BAIciC,M,EAAwB;AAClC,aAAOA,MAAM,GAAG,KAAK5B,CAAL,CAAO,CAAP,EAAU,CAAV,CAAT,GAAwB,KAAKJ,MAApC;AACH;AAED;;;;;;;;;;;;yBASYiC,I,EAAcC,O,EAAiBC,I,EAAcC,O,EAA8C;AAAA,UAA7BC,IAA6B,uEAAtB,CAAsB;AAAA,UAAnBC,OAAmB,uEAAT,CAAS;AACnG,UAAIC,MAAM,GAAG,KAAKC,GAAL,CAASP,IAAT,EAAeE,IAAf,EAAqBE,IAArB,CAAb;AACA,WAAKvC,MAAL,IAAeoC,OAAf;AACA,WAAKnC,MAAL,IAAeqC,OAAf;AACA,WAAKpC,MAAL,IAAesC,OAAf;AACA,WAAKrC,MAAL,GAAc,CAACsC,MAAM,CAAC,CAAD,CAAN,GAAY,KAAKtC,MAAlB,IAA4BiC,OAA5B,GAAsCK,MAAM,CAAC,CAAD,CAA1D;AACA,WAAKrC,MAAL,GAAc,CAACqC,MAAM,CAAC,CAAD,CAAN,GAAY,KAAKrC,MAAlB,IAA4BkC,OAA5B,GAAsCG,MAAM,CAAC,CAAD,CAA1D;AACA,WAAKpC,MAAL,GAAc,CAACoC,MAAM,CAAC,CAAD,CAAN,GAAY,KAAKpC,MAAlB,IAA4BiC,OAA5B,GAAsCG,MAAM,CAAC,CAAD,CAA1D;AACH;AACD;;;;;;;+BAImB5B,K,EAA2B;AAC1C,UAAIA,KAAK,CAACa,MAAN,IAAgB,CAApB,EAAuB,OAAOb,KAAP;AACvB,UAAIA,KAAK,CAACa,MAAN,IAAgB,CAApB,EAAuBb,KAAK,CAAC,CAAD,CAAL,GAAW,CAAX;AACvB,UAAIA,KAAK,CAACa,MAAN,IAAgB,CAApB,EAAuBb,KAAK,CAAC,CAAD,CAAL,GAAW,CAAX;AACvB,UAAIA,KAAK,CAACa,MAAN,IAAgB,CAApB,EAAuBb,KAAK,CAAC,CAAD,CAAL,GAAW,CAAX;AACvB,aAAOA,KAAP;AACH;AACD;;;;;;;4BAIqB;AACjB,WAAKV,MAAL,GAAc,CAAd;AACA,WAAKC,MAAL,GAAc,CAAd;AACA,WAAKC,MAAL,GAAc,CAAd;AACA,WAAKL,MAAL,GAAc,CAAd;AACA,WAAKC,MAAL,GAAc,CAAd;AACA,WAAKC,MAAL,GAAc,CAAd;AACH;AACD;;;;;;;;2CAKiG;AAAA,UAArEI,CAAqE,uEAAjE,CAAC,CAAC,IAAD,EAAO,CAAP,EAAU,CAAV,CAAD,EAAe,CAAC,CAAD,EAAI,IAAJ,EAAU,CAAV,CAAf,EAA6B,CAAC,CAAD,EAAI,CAAJ,EAAO,IAAP,CAA7B,CAAiE;AAAA,UAArBC,CAAqB,uEAAjB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAiB;AAC7F,WAAKD,CAAL,GAASA,CAAT;AACA,WAAKC,CAAL,GAASA,CAAT;AACH","sourcesContent":["import * as utility from '../utility';\r\n//The class that converts virtual coordinate system to its graphics presentation\r\nclass Locator {\r\n    lc = this;\r\n    //Graphics x : standard x (intrinsic)\r\n    scalex = 1;\r\n    //Graphics y : standard y (intrinsic)\r\n    scaley = 1;\r\n    scalez = 1;\r\n    //Moves virtual coordinate deltax virtual units in the x direction\r\n    deltax = 0;\r\n    //Moves virtual coordinate deltay virtual units in the y direction\r\n    deltay = 0;\r\n    deltaz = 0;\r\n    //Transformation matrix used as: C = Ap+B\r\n    /**\r\n     * Transformation coefficient. Has to be a 3 by 3 matrix with none zero determinant\r\n     */\r\n    A = [[0.25, 0, 0],\r\n    [0, 0.25, 0],\r\n    [0, 0, 0.25]];\r\n    /**\r\n     * Transformation constant. Has to be a 3 vector\r\n     */\r\n    B = [0, 0, 0];\r\n    constructor() {\r\n    }\r\n    private _standardMatrix = [0, 0, 0];\r\n    /**\r\n     * Returns a matrix representing the standard coordinate of coord\r\n     * @param virCoord: a representation of a point in the virtual coordinate\r\n     */\r\n    private virtualToStandard(virCoord: number[]): number[] {\r\n        this.checkCoord(virCoord);\r\n        this._standardMatrix[0] = (virCoord[0] + this.deltax) * this.scalex;\r\n        this._standardMatrix[1] = (virCoord[1] + this.deltay) * this.scaley;\r\n        this._standardMatrix[2] = (virCoord[2] + this.deltaz) * this.scalez;\r\n        return this._standardMatrix\r\n    }\r\n    //To graphics X\r\n    public X(...coord: number[]): number {\r\n        return utility.dot(this.A[0], this.virtualToStandard(coord)) + this.B[0];\r\n    }\r\n    //To graphics Y\r\n    public Y(...coord: number[]): number {\r\n        return utility.dot(this.A[1], this.virtualToStandard(coord)) + this.B[1];\r\n    }\r\n    public Z(...coord: number[]): number {\r\n        return utility.dot(this.A[2], this.virtualToStandard(coord)) + this.B[2];\r\n    }\r\n    private _graphicalMatrix = [0, 0, 0];\r\n    private virtualToGraphical(virCoord: number[]): number[] {\r\n        this._graphicalMatrix[0] = this.X(...virCoord);\r\n        this._graphicalMatrix[1] = this.Y(...virCoord);\r\n        this._graphicalMatrix[2] = this.Z(...virCoord);\r\n        return this._graphicalMatrix;\r\n    }\r\n    /**\r\n     * The Width, expressed either in a vector or a single number computed from width\r\n     * @param width the width in virtual coordinates for conversion\r\n     * @param getElement the method returns a single component if the value is set to true\r\n     * or else it returns an array that corresponds to the spatial distance in graphics coordinate\r\n     */\r\n    public Width(width: number, getElement: true): number | number[] {\r\n        if (getElement) {\r\n            return this.X(width, 0, 0) - this.X(0, 0, 0);\r\n        } else {\r\n            return (utility.subtract(this.virtualToGraphical([width, 0, 0]).slice(), this.virtualToGraphical([width, 0, 0])) as number[]);\r\n        }\r\n    }\r\n    /**\r\n     * The Height, expressed either in a vector or a single number computed from height\r\n     * @param height the height in virtual coordinates for conversion\r\n     * @param getElement the method returns a single component if the value is set to true\r\n     * or else it returns an array that corresponds to the spatial distance in graphics coordinate\r\n     */\r\n    public Height(height: number, getElement: true): number | number[] {\r\n        if (getElement) {\r\n            return this.Y(0, height, 0) - this.Y(0, 0, 0);\r\n        } else {\r\n            return (utility.subtract(this.virtualToGraphical([0, height, 0]).slice(), this.virtualToGraphical([0, height, 0])) as number[]);\r\n        }\r\n    }\r\n    /**\r\n     * The Length, expressed either in a vector or a single number computed from length\r\n     * @param height the length in virtual coordinates for conversion\r\n     * @param getElement the method returns a single component if the value is set to true\r\n     * or else it returns an array that corresponds to the spatial distance in graphics coordinate\r\n     */\r\n    public Length(length: number, getElement: true): number | number[] {\r\n        if (getElement) {\r\n            return this.Z(0, 0, length) - this.Z(0, 0, 0);\r\n        } else {\r\n            return (utility.subtract(this.virtualToGraphical([0, 0, length]).slice(), this.virtualToGraphical([0, 0, length])) as number[]);\r\n        }\r\n    }\r\n    private _subtractionMatrix = [0, 0, 0];\r\n    /**\r\n     * Returns a vector representing the virtual coordinate of graph coord.\r\n     * The Locator class only exposes this method because the reverse transform \r\n     * involves matrix transformation and cloning arrays. It's the fastest to not \r\n     * repeat the process for each component.\r\n     * @param graCoord: a representation of a point in the virtual coordinate\r\n     */\r\n    public xyz(...graCoord: number[]): number[] {\r\n        let Ainverse;\r\n        try {\r\n            Ainverse = utility.inv(this.A);\r\n        } catch (error) {\r\n            throw new Error(\"Cannot compute the virtual coordinate, the determinant of the multiplication matrix A is 0\");\r\n        }\r\n        this.checkCoord(graCoord);\r\n        this._subtractionMatrix = (utility.subtract(graCoord, this.B) as number[]);\r\n        this._standardMatrix[0] = utility.dot(Ainverse[0], this._subtractionMatrix);\r\n        this._standardMatrix[1] = utility.dot(Ainverse[1], this._subtractionMatrix);\r\n        this._standardMatrix[2] = utility.dot(Ainverse[2], this._subtractionMatrix);\r\n        /* _subtractionMatrix is reused here as a holder for the _virtualMatrix for the sake of \r\n         * optimization.\r\n         */\r\n        this._subtractionMatrix[0] = this._standardMatrix[0] / this.scalex - this.deltax;\r\n        this._subtractionMatrix[1] = this._standardMatrix[1] / this.scaley - this.deltay;\r\n        this._subtractionMatrix[2] = this._standardMatrix[2] / this.scalez - this.deltaz;\r\n        return this._subtractionMatrix;\r\n    }\r\n\r\n    /**\r\n     * The method assumes non-rotational transformations and uses the diagonals \r\n     * of A for the sake of efficiency, returns a width based on the Width (x-direction)\r\n     */\r\n    public width(Width: number): number {\r\n        return Width / this.A[0][0] / this.scalex;\r\n    }\r\n    /**\r\n     * The method assumes non-rotational transformations and uses the diagonals \r\n     * of A for the sake of efficiency, returns a height based on the Height (y-direction)\r\n     */\r\n    public height(Height: number): number {\r\n        return Height / this.A[1][1] / this.scaley;\r\n    }\r\n    /**\r\n     * The method assumes non-rotational transformations and uses the diagonals \r\n     * of A for the sake of efficiency, returns a length based on the Length (z-direction)\r\n     */\r\n    public length(Length: number): number {\r\n        return Length / this.A[2][2] / this.scalez;\r\n    }\r\n\r\n    /**\r\n     * Pinned zooming\r\n     * @param pinX In graphical units\r\n     * @param factorx Scale scalex by this amount\r\n     * @param pinY In graphical units\r\n     * @param factory Scale scaley by this amount\r\n     * @param pinZ In graphical units\r\n     * @param factorz Scale scalez by this amount\r\n     */\r\n    public zoom(pinX: number, factorx: number, pinY: number, factory: number, pinZ = 0, factorz = 1): void {\r\n        let pinxyz = this.xyz(pinX, pinY, pinZ);\r\n        this.scalex *= factorx;\r\n        this.scaley *= factory;\r\n        this.scalez *= factorz;\r\n        this.deltax = (pinxyz[0] + this.deltax) / factorx - pinxyz[0];\r\n        this.deltay = (pinxyz[1] + this.deltay) / factory - pinxyz[1];\r\n        this.deltaz = (pinxyz[2] + this.deltaz) / factory - pinxyz[2];\r\n    }\r\n    /**\r\n     * Validate that the coordinate has the coorect dimension\r\n     * @param coord the coordinate\r\n     */\r\n    private checkCoord(coord: number[]): number[] {\r\n        if (coord.length >= 3) return coord;\r\n        if (coord.length == 0) coord[0] = 0;\r\n        if (coord.length <= 1) coord[1] = 0;\r\n        if (coord.length <= 2) coord[2] = 0;\r\n        return coord;\r\n    }\r\n    /**\r\n     * Resets all the virtual transformers in the instance,\r\n     * excludes the graphcis transformers A and B\r\n     */\r\n    public reset(): void {\r\n        this.deltax = 0;\r\n        this.deltay = 0;\r\n        this.deltaz = 0\r\n        this.scalex = 0;\r\n        this.scaley = 0;\r\n        this.scalez = 0;\r\n    }\r\n    /**\r\n     * Resets all the graphics matrices for affine transformaiton to the given values\r\n     * @param A Transform coefficient A, default is [[1.5,0,0],[0,1.5,0],[0,0,1.5]]\r\n     * @param B Transform offset B, default is [0,0,0]\r\n     */\r\n    public resetATransformation(A = [[0.25, 0, 0], [0, 0.25, 0], [0, 0, 0.25]], B = [0, 0, 0]): void {\r\n        this.A = A;\r\n        this.B = B;\r\n    }\r\n}\r\nexport {\r\n    Locator\r\n}"],"file":"locator.js"}