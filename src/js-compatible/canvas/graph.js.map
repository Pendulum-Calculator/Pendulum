{"version":3,"sources":["../../js/canvas/graph.ts"],"names":["materials","standard","THREE","MeshPhongMaterial","opacity","transparent","side","DoubleSide","color","opaque","flat","MeshBasicMaterial","line","LineBasicMaterial","Graph","id","graphics","initialized","PIXIGraph","dataset","PIXIObject","vertices","PIXI","Graphics","intervals","initialize","lc","update","PIXIGrid","marksFunction","gridStyle","axisColors","origin","pointer","pointerSize","markColors","size","clear","marks","i","length","vMarks","j","lineStyle","v","moveTo","X","Y","lineTo","axisColor","begin","slice","end","THREEGrid","THREEObject","THREEGraph","material","geometry","faces","Geometry","Mesh"],"mappings":"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","sourcesContent":["//Module import\r\nimport * as THREE from 'three';\r\nimport * as PIXI from 'pixi.js';\r\nimport { Dataset,Curve,Surface,Solid} from './types';\r\nimport { Graphics } from './graphics';\r\nimport { Locator } from './locator';\r\nimport { timingSafeEqual } from 'crypto';\r\nconst materials = {\r\n    standard: new THREE.MeshPhongMaterial({\r\n        opacity: 0.8,\r\n        transparent: true,\r\n        side: THREE.DoubleSide,\r\n        color: 0x7890ab\r\n    }),\r\n    opaque: new THREE.MeshPhongMaterial({\r\n        side: THREE.DoubleSide,\r\n        color: 0x7890ab\r\n    }),\r\n    flat: new THREE.MeshBasicMaterial({\r\n        color: 0x7890ab,\r\n        opacity: 0.8,\r\n        transparent: true,\r\n    }),\r\n    line: new THREE.LineBasicMaterial({\r\n        color: 0x7890ab,\r\n        opacity: 0.8\r\n    })\r\n};\r\n/**\r\n * Each Graph provides an interface for specific\r\n * datasets to interact with the graphics library\r\n */\r\nabstract class Graph {\r\n    initialized = false;\r\n    constructor(public id: string, public graphics: Graphics) {\r\n    }\r\n    /**\r\n     * Initializes the graphable object in Graph based on the intervals specified,\r\n     * instantiates reusable objects if needed for the first time\r\n     * @param intervals [[xbegin, xend], [ybegin, yend]...] in virtual coordinates\r\n     */\r\n    abstract initialize(intervals:number[][]): void;\r\n    /**\r\n     * Renders the graphable object in Graph based on the intervals specified, responding\r\n     * to calls from the graphics animation loop\r\n     * @param intervals [[xbegin, xend], [ybegin, yend]...] in virtual coordinates\r\n     */\r\n    abstract update(intervals:number[][]): void;\r\n}\r\n\r\n/**\r\n * dataset representations through PIXI\r\n */\r\nclass PIXIGraph extends Graph{\r\n    PIXIObject: PIXI.Graphics;\r\n    vertices: THREE.Vector3[];\r\n    constructor(public dataset: Dataset, graphics: Graphics, public color: number){\r\n        super(dataset.id, graphics);\r\n        this.PIXIObject= new PIXI.Graphics();\r\n        this.vertices = [];\r\n    }\r\n    initialize(intervals: number[][]): void {\r\n        if (this.initialized) return;\r\n        this.dataset.initialize(this.graphics.lc, this.vertices);\r\n        this.initialized = true;\r\n    }\r\n    update(intervals: number[][]):void{\r\n        this.dataset.update(this.graphics.lc, this.vertices);\r\n    }\r\n}\r\n\r\nclass PIXIGrid extends Graph {\r\n    PIXIObject: PIXI.Graphics = new PIXI.Graphics();\r\n    constructor(graphics: Graphics, public marksFunction: (intervals: number[][]) => number[][][][], public gridStyle= {\r\n        axisColors: [0xff0000, 0x00ff00, 0x0000ff],\r\n        origin: [0,0,0],\r\n        pointer: \"arrow\",\r\n        pointerSize: 2,\r\n        markColors: [[0x999999, 0xeeeeee], [0x999999, 0xeeeeee], [0x999999, 0xeeeeee]],\r\n    }) {\r\n        super(\"*PIXIGrid\", graphics);\r\n    }\r\n    initialize(intervals: number[][]) {\r\n    }\r\n    update(intervals: number[][]) {\r\n        //Geometry definition\r\n        var size = 2000;\r\n        this.PIXIObject.clear();\r\n        let lc: Locator = this.graphics.lc;\r\n        let marks = this.marksFunction(intervals);\r\n        for (let i = 0; i < marks.length; i++) {\r\n            let vMarks = marks[i];\r\n            for (let j = 0; j < vMarks.length; j++) {\r\n                let color = this.gridStyle.markColors[i][j];\r\n                this.PIXIObject.lineStyle(1/(j+2), color);\r\n                for (let v of vMarks[j]) {\r\n                    v[i] = intervals[i][0];\r\n                    // console.log(v);\r\n                    this.PIXIObject.moveTo(lc.X(...v), lc.Y(...v));\r\n                    v[i] = intervals[i][1];\r\n                    // console.log(v);\r\n                    this.PIXIObject.lineTo(lc.X(...v), lc.Y(...v));\r\n                }\r\n            }\r\n            let axisColor = this.gridStyle.axisColors[i];\r\n            this.PIXIObject.lineStyle(2, axisColor);\r\n            let begin = this.gridStyle.origin.slice();\r\n            let end = this.gridStyle.origin.slice();\r\n            begin[i] = intervals[i][0]\r\n            end[i] = intervals[i][1];\r\n            this.PIXIObject.moveTo(lc.X(...begin), lc.Y(...begin));\r\n            this.PIXIObject.lineTo(lc.X(...end), lc.Y(...end));\r\n            \r\n        }\r\n    }\r\n}\r\n\r\nclass THREEGrid extends Graph {\r\n    THREEObject: THREE.Group;\r\n    constructor(graphics: Graphics, public marksFunction: (intervals: number[][]) => number[][][][], public gridStyle = {\r\n        axisColors: [0xff0000, 0x00ff00, 0x0000ff],\r\n        origin: [0, 0, 0],\r\n        pointer: \"arrow\",\r\n        pointerSize: 2,\r\n        markColors: [[0x999999, 0xeeeeee], [0x999999, 0xeeeeee], [0x999999, 0xeeeeee]],\r\n    }) {\r\n        super(\"*PIXIGrid\", graphics);\r\n    }\r\n    initialize(intervals: number[][]) {\r\n    }\r\n    update(intervals: number[][]) {\r\n        //Geometry definition\r\n        var size = 2000;\r\n        let lc: Locator = this.graphics.lc;\r\n        let marks = this.marksFunction(intervals);\r\n        for (let i = 0; i < marks.length; i++) {\r\n            let vMarks = marks[i];\r\n            for (let j = 0; j < vMarks.length; j++) {\r\n                let color = this.gridStyle.markColors[i][j];\r\n                this.PIXIObject.lineStyle(1 / (j + 1), color);\r\n                for (let v of vMarks[j]) {\r\n                    v[i] = intervals[i][0];\r\n                    // console.log(v);\r\n                    this.PIXIObject.moveTo(lc.X(...v), lc.Y(...v));\r\n                    v[i] = intervals[i][1];\r\n                    // console.log(v);\r\n                    this.PIXIObject.lineTo(lc.X(...v), lc.Y(...v));\r\n                }\r\n            }\r\n            let axisColor = this.gridStyle.axisColors[i];\r\n            this.PIXIObject.lineStyle(2, axisColor);\r\n            let begin = this.gridStyle.origin.slice();\r\n            let end = this.gridStyle.origin.slice();\r\n            begin[i] = intervals[i][0]\r\n            end[i] = intervals[i][1];\r\n            this.PIXIObject.moveTo(lc.X(...begin), lc.Y(...begin));\r\n            this.PIXIObject.lineTo(lc.X(...end), lc.Y(...end));\r\n\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * dataset representations through THREE\r\n */\r\nclass THREEGraph extends Graph {\r\n    THREEObject: THREE.Mesh;\r\n    geometry: THREE.Geometry;\r\n    vertices: THREE.Vector3[];\r\n    faces: THREE.Face3[];\r\n    static getMaterial(color: number, material: new ({ }) => THREE.Material, opacity: number): THREE.Material {\r\n        return new material({\r\n            opacity: 0.8,\r\n            transparent: (opacity === 1) ? false : true,\r\n            side: THREE.DoubleSide,\r\n            color: 0x7890ab\r\n        });\r\n    }\r\n    constructor(public dataset: Dataset, graphics: Graphics, public color: number, public material: THREE.Material = materials.standard) {\r\n        super(dataset.id, graphics);\r\n        //Inject color into the material \r\n        //@ts-ignore\r\n        material.color = color;\r\n        this.geometry = new THREE.Geometry();\r\n        this.faces=this.geometry.faces;\r\n        this.vertices = this.geometry.vertices;\r\n        this.THREEObject = new THREE.Mesh(this.geometry, material);\r\n    }\r\n    initialize(intervals: number[][]): void {\r\n        if(this.initialized) return;\r\n        this.dataset.initialize(this.graphics.lc, this.vertices, this.faces);\r\n        this.initialized = true;\r\n    }\r\n    update(intervals: number[][]): void {\r\n        this.dataset.update(this.graphics.lc, this.vertices, this.faces)\r\n    }\r\n}\r\n\r\nexport {\r\n    Graph,\r\n    PIXIGrid,\r\n    PIXIGraph,\r\n    THREEGraph\r\n}"],"file":"graph.js"}