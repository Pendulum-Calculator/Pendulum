{"version":3,"sources":["../../js/canvas/graph.ts"],"names":["materials","standard","THREE","MeshPhongMaterial","opacity","transparent","side","DoubleSide","color","opaque","flat","MeshBasicMaterial","line","LineBasicMaterial","Graph","id","graphics","initialized","PIXIGraph","dataset","PIXIObject","vertices","PIXI","Graphics","intervals","initialize","lc","update","PIXIGrid","marksFunction","gridStyle","axisColors","origin","pointer","pointerSize","markColors","size","clear","marks","i","length","vMarks","j","lineStyle","v","moveTo","X","Y","lineTo","axisColor","begin","slice","end","THREEGrid","lines","THREEObject","lineCount","Group","geometry","set","a","b","width","undefined","Geometry","push","Vector3","material","linewidth","Line","add","setHex","verticesNeedUpdate","lineWidth","next1CoordSameLevel","next2CoordSameLevel","min","Math","max","vertexA","XYZ","vertexB","draw","THREEGraph","faces","Mesh"],"mappings":"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","sourcesContent":["//Module import\r\nimport * as THREE from 'three';\r\nimport * as PIXI from 'pixi.js';\r\nimport { Dataset, Curve, Surface, Solid } from './types';\r\nimport { Graphics, Graphics3D } from './graphics';\r\nimport { Locator } from './locator';\r\nimport { timingSafeEqual } from 'crypto';\r\nimport { Group, Vector3, Line } from 'three';\r\nimport { MeshLine, MeshLineMaterial } from 'three.meshline';\r\nimport { runInThisContext } from 'vm';\r\nconst materials = {\r\n    standard: new THREE.MeshPhongMaterial({\r\n        opacity: 0.8,\r\n        transparent: true,\r\n        side: THREE.DoubleSide,\r\n        color: 0x7890ab\r\n    }),\r\n    opaque: new THREE.MeshPhongMaterial({\r\n        side: THREE.DoubleSide,\r\n        color: 0x7890ab\r\n    }),\r\n    flat: new THREE.MeshBasicMaterial({\r\n        color: 0x7890ab,\r\n        opacity: 0.8,\r\n        transparent: true,\r\n    }),\r\n    line: new THREE.LineBasicMaterial({\r\n        color: 0x7890ab,\r\n        opacity: 0.8\r\n    })\r\n};\r\n/**\r\n * Each Graph provides an interface for specific\r\n * datasets to interact with the graphics library\r\n */\r\nabstract class Graph {\r\n    initialized = false;\r\n    constructor(public id: string, public graphics: Graphics) {\r\n    }\r\n    /**\r\n     * Initializes the graphable object in Graph based on the intervals specified,\r\n     * instantiates reusable objects if needed for the first time\r\n     * @param intervals [[xbegin, xend], [ybegin, yend]...] in virtual coordinates\r\n     */\r\n    abstract initialize(intervals: number[][]): void;\r\n    /**\r\n     * Renders the graphable object in Graph based on the intervals specified, responding\r\n     * to calls from the graphics animation loop\r\n     * @param intervals [[xbegin, xend], [ybegin, yend]...] in virtual coordinates\r\n     */\r\n    abstract update(intervals: number[][]): void;\r\n}\r\n\r\n/**\r\n * dataset representations through PIXI\r\n */\r\nclass PIXIGraph extends Graph {\r\n    PIXIObject: PIXI.Graphics;\r\n    vertices: THREE.Vector3[];\r\n    constructor(public dataset: Dataset, graphics: Graphics, public color: number) {\r\n        super(dataset.id, graphics);\r\n        this.PIXIObject = new PIXI.Graphics();\r\n        this.vertices = [];\r\n    }\r\n    initialize(intervals: number[][]): void {\r\n        if (this.initialized) return;\r\n        this.dataset.initialize(this.graphics.lc, this.vertices);\r\n    }\r\n    update(intervals: number[][]): void {\r\n        this.dataset.update(this.graphics.lc, this.vertices);\r\n    }\r\n}\r\n\r\nclass PIXIGrid extends Graph {\r\n    PIXIObject: PIXI.Graphics = new PIXI.Graphics();\r\n    constructor(id: string, graphics: Graphics, public marksFunction: (intervals: number[][]) => number[][][][], public gridStyle = {\r\n        axisColors: [0xff0000, 0x00ff00, 0x0000ff],\r\n        origin: [0, 0, 0],\r\n        pointer: \"arrow\",\r\n        pointerSize: 2,\r\n        markColors: [[0x999999, 0xeeeeee], [0x999999, 0xeeeeee], [0x999999, 0xeeeeee]],\r\n    }) {\r\n        super(id, graphics);\r\n    }\r\n    initialize(intervals: number[][]) {\r\n    }\r\n    update(intervals: number[][]) {\r\n        //Geometry definition\r\n        var size = 2000;\r\n        this.PIXIObject.clear();\r\n        let lc: Locator = this.graphics.lc;\r\n        let marks = this.marksFunction(intervals);\r\n        for (let i = 0; i < marks.length; i++) {\r\n            let vMarks = marks[i];\r\n            for (let j = 0; j < vMarks.length; j++) {\r\n                let color = this.gridStyle.markColors[i][j];\r\n                this.PIXIObject.lineStyle(1 / (j + 2), color);\r\n                for (let v of vMarks[j]) {\r\n                    v[i] = intervals[i][0];\r\n                    // console.log(v);\r\n                    this.PIXIObject.moveTo(lc.X(...v), lc.Y(...v));\r\n                    v[i] = intervals[i][1];\r\n                    // console.log(v);\r\n                    this.PIXIObject.lineTo(lc.X(...v), lc.Y(...v));\r\n                }\r\n            }\r\n            let axisColor = this.gridStyle.axisColors[i];\r\n            this.PIXIObject.lineStyle(2, axisColor);\r\n            let begin = this.gridStyle.origin.slice();\r\n            let end = this.gridStyle.origin.slice();\r\n            begin[i] = intervals[i][0]\r\n            end[i] = intervals[i][1];\r\n            this.PIXIObject.moveTo(lc.X(...begin), lc.Y(...begin));\r\n            this.PIXIObject.lineTo(lc.X(...end), lc.Y(...end));\r\n        }\r\n    }\r\n}\r\n\r\nclass THREEGrid extends Graph {\r\n    lines: THREE.Line[] = [];\r\n    THREEObject: THREE.Group;\r\n    lineCount: number;\r\n    constructor(id: string, graphics: Graphics, public marksFunction: (intervals: number[][]) => number[][][][], public gridStyle = {\r\n        axisColors: [0xff0000, 0x00ff00, 0x0000ff],\r\n        origin: [0, 0, 0],\r\n        pointer: \"arrow\",\r\n        pointerSize: 2,\r\n        markColors: [[0x999999, 0xeeeeee], [0x999999, 0xeeeeee], [0x999999, 0xeeeeee]],\r\n    }) {\r\n        super(id, graphics);\r\n        this.THREEObject = new Group();\r\n    }\r\n    initialize(intervals: number[][]) {\r\n    }\r\n    clear() {\r\n        this.lineCount = 0;\r\n        for (let line of this.lines) {\r\n            (line.geometry as THREE.Geometry).vertices[0].set(0, 0, 0);\r\n            (line.geometry as THREE.Geometry).vertices[1].set(0, 0, 0);\r\n        }\r\n    }\r\n    draw(a: number[], b: number[], color: number, width: number) {\r\n        if (this.lines[this.lineCount] == undefined) {\r\n            // let geometry = new THREE.Geometry();\r\n            // geometry.vertices.push(new Vector3(...a));\r\n            // geometry.vertices.push(new Vector3(...b));\r\n            // let material = new MeshLineMaterial({\r\n            //     useMap: false,\r\n            //     color: new THREE.Color(color),\r\n            //     opacity: 1,\r\n            //     sizeAttenuation: !false,\r\n            //     lineWidth: .01,\r\n            //     near: (this.graphics as Graphics3D).camera.near,\r\n            //     far: (this.graphics as Graphics3D).camera.far\r\n            // });\r\n            // let line = new MeshLine();\r\n            // this.lines[this.lineCount]=line;\r\n            // line.setGeometry(geometry);\r\n            // var mesh = new THREE.Mesh(line.geometry, material); // this syntax could definitely be improved!\r\n            // this.THREEObject.add(mesh);\r\n            let geometry = new THREE.Geometry();\r\n            geometry.vertices.push(new Vector3(...a));\r\n            geometry.vertices.push(new Vector3(...b));\r\n            let material = new THREE.LineBasicMaterial({ color: color, linewidth: width });\r\n            this.lines[this.lineCount] = new THREE.Line(geometry, material);\r\n            this.THREEObject.add(this.lines[this.lineCount]);\r\n        } else {\r\n            let line = this.lines[this.lineCount];\r\n            (line.geometry as THREE.Geometry).vertices[0].set(a[0], a[1], a[2]);\r\n            (line.geometry as THREE.Geometry).vertices[1].set(b[0], b[1], b[2]);\r\n            (line.material as THREE.LineBasicMaterial).color.setHex(color);\r\n            (line.material as THREE.LineBasicMaterial).linewidth = width;\r\n            (line.geometry as THREE.Geometry).verticesNeedUpdate = true;\r\n        }\r\n        this.lineCount++;\r\n    }\r\n    update(intervals: number[][]) {\r\n        let lc: Locator = this.graphics.lc;\r\n        this.clear();\r\n        let marks = this.marksFunction(intervals);\r\n        for (let i = 0; i < marks.length; i++) {\r\n            let vMarks = marks[i];\r\n            for (let j = vMarks.length - 1; j >= 0; j--) {\r\n                let color = this.gridStyle.markColors[i][j];\r\n                let lineWidth = 0.1;\r\n                let next1CoordSameLevel = marks[(i + 1) % marks.length][j],\r\n                    next2CoordSameLevel = marks[(i + 2) % marks.length][j];\r\n                // if(next1CoordSameLevel==undefined||next1CoordSameLevel.length==0)\r\n                //     next1CoordSameLevel = next2CoordSameLevel;\r\n                // if(next2CoordSameLevel == undefined||next2CoordSameLevel.length==0){\r\n                //     next2CoordSameLevel = next1CoordSameLevel;\r\n                //     if(next2CoordSameLevel == undefined||next2CoordSameLevel.length==0){\r\n                //         next1CoordSameLevel=next2CoordSameLevel = [[0,0,0]]\r\n                //     }\r\n                // }\r\n                \r\n                let min =Math.max(next1CoordSameLevel[0][i], next2CoordSameLevel[0][i]);\r\n                let max =Math.min(next1CoordSameLevel[next1CoordSameLevel.length - 1][i], next2CoordSameLevel[next2CoordSameLevel.length - 1][i]);\r\n                for (let v of vMarks[j]) {\r\n                    v[i] = min;\r\n                    let vertexA = lc.XYZ(...v);\r\n                    v[i] = max;\r\n                    let vertexB = lc.XYZ(...v);\r\n                    this.draw(vertexA, vertexB, color, lineWidth);\r\n                }\r\n            }\r\n            let axisColor = this.gridStyle.axisColors[i];\r\n            let lineWidth = 0.5;\r\n            let begin = this.gridStyle.origin.slice();\r\n            let end = this.gridStyle.origin.slice();\r\n            begin[i] = -25;\r\n            let vertexA = lc.XYZ(...begin);\r\n            end[i] = 25;\r\n            let vertexB = lc.XYZ(...end);\r\n            this.draw(vertexA, vertexB, axisColor, lineWidth);\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * dataset representations through THREE\r\n */\r\nclass THREEGraph extends Graph {\r\n    THREEObject: THREE.Mesh;\r\n    geometry: THREE.Geometry;\r\n    vertices: THREE.Vector3[];\r\n    faces: THREE.Face3[];\r\n    static getMaterial(color: number, material: new ({ }) => THREE.Material, opacity: number): THREE.Material {\r\n        return new material({\r\n            opacity: 0.8,\r\n            transparent: (opacity === 1) ? false : true,\r\n            side: THREE.DoubleSide,\r\n            color: 0x7890ab\r\n        });\r\n    }\r\n    constructor(public dataset: Dataset, graphics: Graphics, public color: number, public material: THREE.Material = materials.standard) {\r\n        super(dataset.id, graphics);\r\n        //Inject color into the material \r\n        //@ts-ignore\r\n        material.color = color;\r\n        this.geometry = new THREE.Geometry();\r\n        this.faces = this.geometry.faces;\r\n        this.vertices = this.geometry.vertices;\r\n        this.THREEObject = new THREE.Mesh(this.geometry, material);\r\n    }\r\n    initialize(intervals: number[][]): void {\r\n        if (this.initialized) return;\r\n        this.dataset.initialize(this.graphics.lc, this.vertices, this.faces);\r\n    }\r\n    update(intervals: number[][]): void {\r\n        this.dataset.update(this.graphics.lc, this.vertices, this.faces)\r\n    }\r\n}\r\n\r\nexport {\r\n    Graph,\r\n    PIXIGrid,\r\n    THREEGrid,\r\n    PIXIGraph,\r\n    THREEGraph\r\n}"],"file":"graph.js"}