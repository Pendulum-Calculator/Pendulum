{"version":3,"sources":["../../js/canvas/graph.ts"],"names":["materials","standard","THREE","MeshPhongMaterial","opacity","transparent","side","DoubleSide","color","opaque","flat","MeshBasicMaterial","line","LineBasicMaterial","Graph","id","graphics","initialized","PIXIGraph","dataset","PIXIObject","vertices","PIXI","Graphics","intervals","initialize","lc","clear","vertex","set","update","Function1V","moveTo","x","y","lineStyle","i","length","lineTo","PIXIGrid","marksFunction","gridStyle","axisColors","origin","pointer","pointerSize","markColors","size","marks","vMarks","j","v","X","Y","axisColor","begin","slice","end","THREEGrid","lines","THREEObject","lineCount","Group","geometry","a","b","width","undefined","Geometry","push","Vector3","material","linewidth","Line","add","setHex","verticesNeedUpdate","lineWidth","next1CoordSameLevel","next2CoordSameLevel","min","Math","max","vertexA","XYZ","vertexB","draw","THREEGraph","faces","Mesh"],"mappings":"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","sourcesContent":["//Module import\r\nimport * as THREE from 'three';\r\nimport * as PIXI from 'pixi.js';\r\nimport { Dataset, Curve, Surface, Solid, Function1V } from './types';\r\nimport { Graphics, Graphics3D } from './graphics';\r\nimport { Locator } from './locator';\r\nimport { timingSafeEqual } from 'crypto';\r\nimport { Group, Vector3, Line, VertexColors } from 'three';\r\nimport { MeshLine, MeshLineMaterial } from 'three.meshline';\r\nimport { runInThisContext } from 'vm';\r\nconst materials = {\r\n    standard: new THREE.MeshPhongMaterial({\r\n        opacity: 0.8,\r\n        transparent: true,\r\n        side: THREE.DoubleSide,\r\n        color: 0x7890ab\r\n    }),\r\n    opaque: new THREE.MeshPhongMaterial({\r\n        side: THREE.DoubleSide,\r\n        color: 0x7890ab\r\n    }),\r\n    flat: new THREE.MeshBasicMaterial({\r\n        color: 0x7890ab,\r\n        opacity: 0.8,\r\n        transparent: true,\r\n    }),\r\n    line: new THREE.LineBasicMaterial({\r\n        color: 0x7890ab,\r\n        opacity: 0.8\r\n    })\r\n};\r\n/**\r\n * Each Graph provides an interface for specific\r\n * datasets to interact with the graphics library\r\n */\r\nabstract class Graph {\r\n    initialized = false;\r\n    constructor(public id: string, public graphics: Graphics) {\r\n    }\r\n    /**\r\n     * Initializes the graphable object in Graph based on the intervals specified,\r\n     * instantiates reusable objects if needed for the first time\r\n     * @param intervals [[xbegin, xend], [ybegin, yend]...] in virtual coordinates\r\n     */\r\n    abstract initialize(intervals: number[][]): void;\r\n    /**\r\n     * Renders the graphable object in Graph based on the intervals specified, responding\r\n     * to calls from the graphics animation loop\r\n     * @param intervals [[xbegin, xend], [ybegin, yend]...] in virtual coordinates\r\n     */\r\n    abstract update(intervals: number[][]): void;\r\n}\r\n\r\n/**\r\n * dataset representations through PIXI\r\n */\r\nclass PIXIGraph extends Graph {\r\n    PIXIObject: PIXI.Graphics;\r\n    vertices: THREE.Vector3[];\r\n    constructor(public dataset: Dataset, graphics: Graphics, public color: number) {\r\n        super(dataset.id, graphics);\r\n        this.PIXIObject = new PIXI.Graphics();\r\n        this.vertices = [];\r\n    }\r\n    initialize(intervals: number[][]): void {\r\n        if (this.initialized) return;\r\n        this.dataset.initialize(this.graphics.lc,intervals, this.vertices);\r\n        this.initialized=true;\r\n    }\r\n    clear():void{\r\n        this.PIXIObject.clear();\r\n        for(let vertex of this.vertices)\r\n            vertex.set(0,0,0);\r\n    }\r\n    update(intervals: number[][]): void {\r\n        this.clear();\r\n        this.dataset.update(this.graphics.lc, intervals, this.vertices);\r\n        if(this.dataset instanceof Function1V){\r\n            this.PIXIObject.moveTo(this.vertices[0].x, this.vertices[0].y);\r\n            this.PIXIObject.lineStyle(1.5, this.color);\r\n            for (let i = 1; i < this.vertices.length; i++) {\r\n                this.PIXIObject.lineTo(this.vertices[i].x, this.vertices[i].y);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nclass PIXIGrid extends Graph {\r\n    PIXIObject: PIXI.Graphics = new PIXI.Graphics();\r\n    constructor(id: string, graphics: Graphics, public marksFunction: (intervals: number[][]) => number[][][][], public gridStyle = {\r\n        axisColors: [0xff0000, 0x00ff00, 0x0000ff],\r\n        origin: [0, 0, 0],\r\n        pointer: \"arrow\",\r\n        pointerSize: 2,\r\n        markColors: [[0x999999, 0xeeeeee], [0x999999, 0xeeeeee], [0x999999, 0xeeeeee]],\r\n    }) {\r\n        super(id, graphics);\r\n    }\r\n    initialize(intervals: number[][]) {\r\n    }\r\n    update(intervals: number[][]) {\r\n        //Geometry definition\r\n        var size = 2000;\r\n        this.PIXIObject.clear();\r\n        let lc: Locator = this.graphics.lc;\r\n        let marks = this.marksFunction(intervals);\r\n        for (let i = 0; i < marks.length; i++) {\r\n            let vMarks = marks[i];\r\n            for (let j = 0; j < vMarks.length; j++) {\r\n                let color = this.gridStyle.markColors[i][j];\r\n                this.PIXIObject.lineStyle(1 / (j + 2), color);\r\n                for (let v of vMarks[j]) {\r\n                    v[i] = intervals[i][0];\r\n                    // console.log(v);\r\n                    this.PIXIObject.moveTo(lc.X(...v), lc.Y(...v));\r\n                    v[i] = intervals[i][1];\r\n                    // console.log(v);\r\n                    this.PIXIObject.lineTo(lc.X(...v), lc.Y(...v));\r\n                }\r\n            }\r\n            let axisColor = this.gridStyle.axisColors[i];\r\n            this.PIXIObject.lineStyle(2, axisColor);\r\n            let begin = this.gridStyle.origin.slice();\r\n            let end = this.gridStyle.origin.slice();\r\n            begin[i] = intervals[i][0]\r\n            end[i] = intervals[i][1];\r\n            this.PIXIObject.moveTo(lc.X(...begin), lc.Y(...begin));\r\n            this.PIXIObject.lineTo(lc.X(...end), lc.Y(...end));\r\n        }\r\n    }\r\n}\r\n\r\nclass THREEGrid extends Graph {\r\n    lines: THREE.Line[] = [];\r\n    THREEObject: THREE.Group;\r\n    lineCount: number;\r\n    constructor(id: string, graphics: Graphics, public marksFunction: (intervals: number[][]) => number[][][][], public gridStyle = {\r\n        axisColors: [0xff0000, 0x00ff00, 0x0000ff],\r\n        origin: [0, 0, 0],\r\n        pointer: \"arrow\",\r\n        pointerSize: 2,\r\n        markColors: [[0x999999, 0xeeeeee], [0x999999, 0xeeeeee], [0x999999, 0xeeeeee]],\r\n    }) {\r\n        super(id, graphics);\r\n        this.THREEObject = new Group();\r\n    }\r\n    initialize(intervals: number[][]) {\r\n    }\r\n    clear() {\r\n        this.lineCount = 0;\r\n        for (let line of this.lines) {\r\n            (line.geometry as THREE.Geometry).vertices[0].set(0, 0, 0);\r\n            (line.geometry as THREE.Geometry).vertices[1].set(0, 0, 0);\r\n        }\r\n    }\r\n    draw(a: number[], b: number[], color: number, width: number) {\r\n        if (this.lines[this.lineCount] == undefined) {\r\n            // let geometry = new THREE.Geometry();\r\n            // geometry.vertices.push(new Vector3(...a));\r\n            // geometry.vertices.push(new Vector3(...b));\r\n            // let material = new MeshLineMaterial({\r\n            //     useMap: false,\r\n            //     color: new THREE.Color(color),\r\n            //     opacity: 1,\r\n            //     sizeAttenuation: !false,\r\n            //     lineWidth: .01,\r\n            //     near: (this.graphics as Graphics3D).camera.near,\r\n            //     far: (this.graphics as Graphics3D).camera.far\r\n            // });\r\n            // let line = new MeshLine();\r\n            // this.lines[this.lineCount]=line;\r\n            // line.setGeometry(geometry);\r\n            // var mesh = new THREE.Mesh(line.geometry, material); // this syntax could definitely be improved!\r\n            // this.THREEObject.add(mesh);\r\n            let geometry = new THREE.Geometry();\r\n            geometry.vertices.push(new Vector3(...a));\r\n            geometry.vertices.push(new Vector3(...b));\r\n            let material = new THREE.LineBasicMaterial({ color: color, linewidth: width });\r\n            this.lines[this.lineCount] = new THREE.Line(geometry, material);\r\n            this.THREEObject.add(this.lines[this.lineCount]);\r\n        } else {\r\n            let line = this.lines[this.lineCount];\r\n            (line.geometry as THREE.Geometry).vertices[0].set(a[0], a[1], a[2]);\r\n            (line.geometry as THREE.Geometry).vertices[1].set(b[0], b[1], b[2]);\r\n            (line.material as THREE.LineBasicMaterial).color.setHex(color);\r\n            (line.material as THREE.LineBasicMaterial).linewidth = width;\r\n            (line.geometry as THREE.Geometry).verticesNeedUpdate = true;\r\n        }\r\n        this.lineCount++;\r\n    }\r\n    update(intervals: number[][]) {\r\n        let lc: Locator = this.graphics.lc;\r\n        this.clear();\r\n        let marks = this.marksFunction(intervals);\r\n        for (let i = 0; i < marks.length; i++) {\r\n            let vMarks = marks[i];\r\n            for (let j = vMarks.length - 1; j >= 0; j--) {\r\n                let color = this.gridStyle.markColors[i][j];\r\n                let lineWidth = 0.1;\r\n                let next1CoordSameLevel = marks[(i + 1) % marks.length][j],\r\n                    next2CoordSameLevel = marks[(i + 2) % marks.length][j];\r\n                // if(next1CoordSameLevel==undefined||next1CoordSameLevel.length==0)\r\n                //     next1CoordSameLevel = next2CoordSameLevel;\r\n                // if(next2CoordSameLevel == undefined||next2CoordSameLevel.length==0){\r\n                //     next2CoordSameLevel = next1CoordSameLevel;\r\n                //     if(next2CoordSameLevel == undefined||next2CoordSameLevel.length==0){\r\n                //         next1CoordSameLevel=next2CoordSameLevel = [[0,0,0]]\r\n                //     }\r\n                // }\r\n                \r\n                let min =Math.min(next1CoordSameLevel[0][i], next2CoordSameLevel[0][i]);\r\n                let max =Math.max(next1CoordSameLevel[next1CoordSameLevel.length - 1][i], next2CoordSameLevel[next2CoordSameLevel.length - 1][i]);\r\n                for (let v of vMarks[j]) {\r\n                    v[i] = min;\r\n                    let vertexA = lc.XYZ(...v);\r\n                    v[i] = max;\r\n                    let vertexB = lc.XYZ(...v);\r\n                    this.draw(vertexA, vertexB, color, lineWidth);\r\n                }\r\n            }\r\n            let axisColor = this.gridStyle.axisColors[i];\r\n            let lineWidth = 0.5;\r\n            let begin = this.gridStyle.origin.slice();\r\n            let end = this.gridStyle.origin.slice();\r\n            begin[i] = -25;\r\n            let vertexA = lc.XYZ(...begin);\r\n            end[i] = 25;\r\n            let vertexB = lc.XYZ(...end);\r\n            this.draw(vertexA, vertexB, axisColor, lineWidth);\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * dataset representations through THREE\r\n */\r\nclass THREEGraph extends Graph {\r\n    THREEObject: THREE.Mesh;\r\n    geometry: THREE.Geometry;\r\n    vertices: THREE.Vector3[];\r\n    faces: THREE.Face3[];\r\n    static getMaterial(color: number, material: new ({ }) => THREE.Material, opacity: number): THREE.Material {\r\n        return new material({\r\n            opacity: 0.8,\r\n            transparent: (opacity === 1) ? false : true,\r\n            side: THREE.DoubleSide,\r\n            color: 0x7890ab\r\n        });\r\n    }\r\n    constructor(public dataset: Dataset, graphics: Graphics, public color: number, public material: THREE.Material = materials.standard) {\r\n        super(dataset.id, graphics);\r\n        //Inject color into the material \r\n        //@ts-ignore\r\n        material.color = color;\r\n        this.geometry = new THREE.Geometry();\r\n        this.faces = this.geometry.faces;\r\n        this.vertices = this.geometry.vertices;\r\n        this.THREEObject = new THREE.Mesh(this.geometry, material);\r\n    }\r\n    initialize(intervals: number[][]): void {\r\n        if (this.initialized) return;\r\n        this.dataset.initialize(this.graphics.lc,intervals, this.vertices, this.faces);\r\n    }\r\n    update(intervals: number[][]): void {\r\n        this.dataset.update(this.graphics.lc, intervals, this.vertices, this.faces)\r\n    }\r\n}\r\n\r\nexport {\r\n    Graph,\r\n    PIXIGrid,\r\n    THREEGrid,\r\n    PIXIGraph,\r\n    THREEGraph\r\n}"],"file":"graph.js"}