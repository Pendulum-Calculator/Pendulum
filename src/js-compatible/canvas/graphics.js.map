{"version":3,"sources":["../../js/canvas/graphics.ts"],"names":["Graphics","canvas","id","syncTargets","Map","domObject","rootScene","graphs","width","height","lc","clock","pause","offsetWidth","offsetHeight","THREE","Clock","synchronize","Dataset","removeDataset","graphics","removeGraph","item","initialize","update","appendChild","start","startAnimation","stop","removeChild","requestAnimationFrame","animate","updateGraphs","render","Error","set","Graphics2D","app","renderer","PIXI","Application","antialias","transparent","resolution","view","stage","autoDensity","resize","Locator","A","B","dataset","color","material","addDataset","undefined","graph","PIXIGraph","addGraph","addChild","PIXIObject","$","outerWidth","outerHeight","Graphics3D","lights","camera","createWebGLRenderer","domElement","Scene","topLight","DirectionalLight","position","addLight","botLight","ambientLight","AmbientLight","createPerspectiveCamera","name","light","add","remove","WebGLRenderer","alpha","setPixelRatio","window","devicePixelRatio","setSize","aspect","PerspectiveCamera","y","lookAt","up","THREEGraph","THREEObject","updateProjectionMatrix","OrthographicCamera"],"mappings":"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","sourcesContent":["//Module import\r\nimport * as THREE from 'three';\r\nimport * as PIXI from 'pixi.js';\r\nimport {Locator} from './locator';\r\nimport 'jquery';\r\nimport { Dataset } from './types';\r\nimport { Graph, PIXIGraph, THREEGraph } from './graph';\r\n/**\r\n * A wrapper around THREE and PIXI rendering engines to give them the same syntax \r\n * to handle with.\r\n */\r\nabstract class Graphics {\r\n    abstract id: string;\r\n    syncTargets: Map<string,Graphics>=new Map();\r\n    abstract domObject: HTMLCanvasElement;\r\n    abstract rootScene: any;\r\n    protected graphs: Map<string, Graph>=new Map();\r\n    width:number;\r\n    height: number;\r\n    abstract lc: Locator;\r\n    clock: THREE.Clock;\r\n    // /**\r\n    //  * Indicator for performed synchronization\r\n    //  */\r\n    // protected synchronized: boolean = true;\r\n    /**\r\n     * Pauses the asynchronous animation if set to true\r\n     */\r\n    pause: boolean = false;\r\n    /**\r\n     * Initializes a common interface for graphics manipulations\r\n     * @param canvas The div in which the graphics renderer sits in\r\n     */\r\n    constructor(public canvas:HTMLDivElement){\r\n        this.width = canvas.offsetWidth;\r\n        this.height = canvas.offsetHeight;\r\n        this.clock = new THREE.Clock(false);\r\n    }\r\n    /**\r\n     * Adds a dataset to the current list of datasets to this and all the synchronized targets\r\n     * @param dataset the dataset to be added, it has to have an id\r\n     * @param color \r\n     * @param material\r\n     * @param synchronize Whether the operation should be synchronized with the sync targets\r\n     * @returns the Graph object created that contains the dataset\r\n     */\r\n    abstract addDataset(dataset: Dataset, color: number, material?:THREE.Material, synchronize?:boolean):Graph;\r\n    /**\r\n     * Removes the specified dataset from this and all the synchronized targets\r\n     * @param id The id of the dataset to be removed\r\n     * @param synchronize Whether the operation should be synchronized with the sync targets\r\n     */\r\n    removeDataset(id: string, synchronize: boolean):void;\r\n    /**\r\n     * Removes the specified dataset from this and all the synchronized targets\r\n     * @param dataset The dataset to be removed\r\n     * @param synchronize Whether the operation should be synchronized with the sync targets\r\n     */\r\n    removeDataset(dataset: Dataset, synchronize: boolean): void;\r\n    removeDataset(id: string|Dataset, synchronize:boolean=true):void{\r\n        if(id instanceof Dataset){\r\n            this.removeDataset(id.id,synchronize);\r\n        }else{\r\n            if(synchronize)\r\n                for (let graphics of this.syncTargets)\r\n                    graphics[1].removeDataset(id, false);\r\n            this.removeGraph(id,false);\r\n        }\r\n    }\r\n    /**\r\n     * Adds the graph to the Graphs list directly without initialization\r\n     * and that of all the synchronized targets\r\n     * @param graph the graph to be added\r\n     * @param synchronize Whether the operation should be synchronized with the sync targets\r\n     */\r\n    abstract addGraph(graph: Graph, synchronize: boolean)\r\n    /**\r\n     * Removes the specified graph from this and all the synchronized targets\r\n     * @param id The id of the graph to be removed\r\n     * @param synchronize Whether the operation should be synchronized with the sync targets\r\n     * @return whether the graph existed and has been successfully removed\r\n     */\r\n    removeGraph(id: string, synchronize?: boolean): boolean;\r\n    /**\r\n     * Removes the specified graph from this and all the synchronized targets\r\n     * @param dataset The graph to be removed\r\n     * @param synchronize Whether the operation should be synchronized with the sync targets\r\n     * @returns whether the graph existed and has been successfully removed\r\n     */\r\n    removeGraph(graph: Graph, synchronize?: boolean): boolean;\r\n    removeGraph(id: string | Graph, synchronize: boolean = true): boolean {\r\n        if (id instanceof Dataset) {\r\n            return this.removeGraph(id.id, synchronize);\r\n        } else {\r\n            if(synchronize)\r\n                for (let graphics of this.syncTargets)\r\n                    graphics[1].removeGraph(id as string, false);\r\n            return this.graphs.delete((id as string));\r\n        }\r\n    }\r\n    /**\r\n     * Initializes all the graphs that haven't been initialized\r\n     */\r\n    intialieGraphs(){\r\n        for(let item of this.graphs){\r\n            item[1].initialize();\r\n        }\r\n    }\r\n    /**\r\n     * Updates all the graphs in this canvas\r\n     */\r\n    updateGraphs() {\r\n        for (let item of this.graphs) {\r\n            item[1].update();\r\n        }\r\n    }\r\n    /**\r\n     * Attaches this.domObject to the specified panel\r\n     */\r\n    public attach(): void {\r\n        this.canvas.appendChild(this.domObject);\r\n        this.clock.start();\r\n        this.startAnimation();\r\n    }\r\n    /**\r\n     * Detaches this.domObject from the specified panel\r\n     */\r\n    public detach(): void {\r\n        this.clock.stop();\r\n        this.canvas.removeChild(this.domObject);\r\n        this.pause = true;\r\n    }\r\n    public animate(){\r\n        if(!this.pause)\r\n            requestAnimationFrame(this.animate);\r\n        this.updateGraphs();\r\n        this.render();\r\n    }\r\n    public startAnimation(){\r\n        this.pause=false;\r\n        this.animate();\r\n    }\r\n    public pauseAnimation(){\r\n        this.pause = true;\r\n    }\r\n    /**\r\n     * Called to render the root scene\r\n     */\r\n    abstract render(): void;\r\n    abstract onResize(): void;\r\n    public addSyncTarget(graphics: Graphics){\r\n        if(graphics===this)\r\n            throw new Error(\"Cannot add self to the sync target list\");\r\n        this.syncTargets.set(graphics.id, graphics);\r\n    }\r\n    public removeSyncTarget(graphics: Graphics): boolean{\r\n        return this.syncTargets.delete(graphics.id);\r\n    }\r\n}\r\n\r\n/**\r\n * Standard 2D graphical representation\r\n */\r\nclass Graphics2D extends Graphics {\r\n    domObject: HTMLCanvasElement;\r\n    rootScene: PIXI.Container;\r\n    app: PIXI.Application;\r\n    private renderer: PIXI.Renderer;\r\n    lc: Locator;\r\n    protected graphs: Map<string, PIXIGraph> = new Map();\r\n    constructor(public canvas: HTMLDivElement, public id = \"g2d\") {\r\n        super(canvas);\r\n        this.app = new PIXI.Application({\r\n            width: this.width,\r\n            height: this.height,\r\n            antialias: true, // default: false\r\n            transparent: true, // default: false\r\n            resolution: 1 // default: 1\r\n        });\r\n        this.domObject = this.app.view;\r\n        this.domObject.id = id;\r\n        //Setup root scene\r\n        this.rootScene = this.app.stage;\r\n        //Setup renderer\r\n        this.renderer = this.app.renderer;\r\n        this.app.renderer.autoDensity = true;\r\n        //purpose served by autoDensity which takes into acount of the window.devicePixelRatio\r\n        // this.renderer.resolution = window.devicePixelRatio; \r\n        this.renderer.resize(this.width, this.height);\r\n        this.lc = new Locator();\r\n        this.lc.A = [[30, 0, 0], [0, -30, 0], [0, 0, 0]];\r\n        this.lc.B = [this.width / 2, this.height / 2, 0];\r\n    }\r\n    addDataset(dataset: Dataset, color: number, material?: THREE.Material, synchronize = true): Graph {\r\n        if(synchronize)\r\n            for (let item of this.syncTargets) {\r\n                item[1].addDataset(dataset, color, undefined, synchronize);\r\n            }\r\n        if (dataset.id != undefined) {\r\n            let graph = new PIXIGraph(dataset, this, color);\r\n            this.addGraph(graph, false);\r\n            return graph;\r\n        }\r\n        else throw new Error(\"Failed to add dataset, the id of \" + dataset + \" is not defined\");\r\n    }\r\n    addGraph(graph: PIXIGraph, synchronize: boolean = true) {\r\n        if (synchronize)\r\n            for (let item of this.syncTargets)\r\n                item[1].addGraph(graph, false);\r\n        this.graphs.set(graph.id, graph);\r\n        this.rootScene.addChild(graph.PIXIObject);\r\n    }\r\n    render() {\r\n        this.app.render();\r\n    }\r\n    onResize() {\r\n        this.width = this.canvas.offsetWidth;\r\n        this.height = this.canvas.offsetHeight;\r\n        this.lc.B = [this.width / 2, this.height / 2, 0]\r\n        this.renderer.resize(this.width, this.height);\r\n        $(this.canvas).outerWidth(this.width);\r\n        $(this.canvas).outerHeight(this.height);\r\n        this.updateGraphs();\r\n        this.render();\r\n    }\r\n}\r\n\r\n/**\r\n * Standard 3D graphical representation\r\n */\r\nclass Graphics3D extends Graphics {\r\n    domObject: HTMLCanvasElement;\r\n    rootScene: THREE.Scene;\r\n    private renderer:THREE.Renderer;\r\n    lights: {name?:THREE.Light}={};\r\n    camera: THREE.Camera;\r\n    lc: Locator;\r\n    protected graphs: Map<string, THREEGraph> = new Map();\r\n    constructor(public canvas:HTMLDivElement, public id = \"g3d\"){\r\n        super(canvas);\r\n        this.renderer = this.createWebGLRenderer();\r\n        this.domObject = this.renderer.domElement;\r\n        //Attach dom object\r\n        this.domObject.id = id;\r\n        //Create scene\r\n        this.rootScene = new THREE.Scene();\r\n        //Setup lighting\r\n        let topLight = new THREE.DirectionalLight(0xffffff, 0.5);\r\n        topLight.position.set(0, 0, 5);\r\n        this.addLight(\"top\", topLight);\r\n        let botLight = new THREE.DirectionalLight(0xffffff, 0.5);\r\n        botLight.position.set(0, 0, -5);\r\n        this.addLight(\"bot\", botLight);\r\n        let ambientLight = new THREE.AmbientLight(0xffffff, 0.5);\r\n        this.addLight(\"ambient\", ambientLight);\r\n        //Setup camera\r\n        this.camera=this.createPerspectiveCamera();\r\n        //Setup locator for cooridnate transformation\r\n        this.lc=new Locator();\r\n    }\r\n    public addLight(name: string, light:THREE.Light){\r\n        this.lights[name]=light;\r\n        this.rootScene.add(light);\r\n    }\r\n    public removeLight(name: string){\r\n        this.rootScene.remove(this.lights[name]);\r\n        delete this.lights[name];\r\n    }\r\n    private createWebGLRenderer():THREE.WebGLRenderer{\r\n        let renderer = new THREE.WebGLRenderer({\r\n            antialias: true,\r\n            alpha: true\r\n        });\r\n        renderer.setPixelRatio(window.devicePixelRatio);\r\n        renderer.setSize(this.width, this.height);\r\n        return renderer;\r\n    }\r\n    private createPerspectiveCamera():THREE.PerspectiveCamera{\r\n        let aspect = this.width / this.height;\r\n        let camera = new THREE.PerspectiveCamera(75, aspect, 0.01, 500);\r\n        camera.position.y = -5;\r\n        camera.lookAt(0, 0, 0);\r\n        camera.up.set(0, 0, 1);\r\n        return camera;\r\n    }\r\n    /**\r\n     * Adds a dataset to the current list of datasets to this and all the synchronized targets\r\n     * @param dataset the dataset to be added, it has to have an id\r\n     * @param synchronize Whether the operation should be synchronized with the sync targets\r\n     * @returns the Graph object created that contains the dataset\r\n     */\r\n    addDataset(dataset: Dataset, color: number, material?: THREE.Material, synchronize = true): Graph {\r\n        if(synchronize)\r\n            for (let graphics of this.syncTargets) {\r\n                graphics[1].addDataset(dataset, color, material, false);\r\n            }\r\n        if (dataset.id != undefined) {\r\n            let graph = new THREEGraph(dataset, this, color, material);\r\n            this.addGraph(graph, false);\r\n            return graph;\r\n        }\r\n        else throw new Error(\"Failed to add dataset, the id of \" + dataset + \" is not defined\");\r\n    }\r\n    addGraph(graph: THREEGraph, synchronize: boolean = true) {\r\n        if (synchronize)\r\n            for (let item of this.syncTargets)\r\n                item[1].addGraph(graph, false);\r\n        this.graphs.set(graph.id, graph);\r\n        this.rootScene.add(graph.THREEObject);\r\n    }\r\n    render(){\r\n        this.renderer.render(this.rootScene, this.camera);\r\n    }\r\n    onResize() {\r\n        this.width = this.canvas.offsetWidth;\r\n        this.height = this.canvas.offsetHeight;\r\n        this.renderer.setSize(this.width, this.height);\r\n        if(this.camera instanceof THREE.PerspectiveCamera){\r\n            this.camera.aspect = this.width / this.height;\r\n            this.camera.updateProjectionMatrix();\r\n        }\r\n        if (this.camera instanceof THREE.OrthographicCamera)\r\n            this.camera.updateProjectionMatrix();\r\n        this.renderer.render(this.rootScene, this.camera);\r\n    }\r\n}\r\n\r\nexport {\r\n    Graphics,\r\n    Graphics2D,\r\n    Graphics3D,\r\n}"],"file":"graphics.js"}