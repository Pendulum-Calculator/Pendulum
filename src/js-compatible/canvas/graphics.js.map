{"version":3,"sources":["../../js/canvas/graphics.ts"],"names":["Graphics","canvas","id","domObject","rootScene","width","height","lc","clock","pause","offsetWidth","offsetHeight","THREE","Clock","appendChild","start","animate","stop","removeChild","requestAnimationFrame","updateDataSets","render","Graphics2D","app","renderer","PIXI","Application","antialias","transparent","resolution","view","stage","autoDensity","resize","Locator","A","B","$","outerWidth","outerHeight","Graphics3D","lights","camera","createWebGLRenderer","domElement","Scene","topLight","DirectionalLight","position","set","addLight","botLight","ambientLight","AmbientLight","createPerspectiveCamera","name","light","add","remove","WebGLRenderer","alpha","setPixelRatio","window","devicePixelRatio","setSize","aspect","PerspectiveCamera","y","lookAt","up","updateProjectionMatrix","OrthographicCamera"],"mappings":"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","sourcesContent":["//Module import\r\nimport * as THREE from 'three';\r\nimport * as PIXI from 'pixi.js';\r\nimport {Locator} from './locator';\r\nimport 'jquery';\r\n/**\r\n * A wrapper around THREE and PIXI rendering engines to give them the same syntax \r\n * to handle with.\r\n */\r\nabstract class Graphics {\r\n    abstract id: string;\r\n    abstract domObject: HTMLCanvasElement;\r\n    abstract rootScene: any;\r\n    width:number;\r\n    height: number;\r\n    abstract lc: Locator;\r\n    clock: THREE.Clock;\r\n    /**\r\n     * Pauses the asynchronous animation if set to true\r\n     */\r\n    pause: boolean = false;\r\n    /**\r\n     * Initializes a common interface for graphics manipulations\r\n     * @param canvas The div in which the graphics renderer sits in\r\n     */\r\n    constructor(public canvas:HTMLDivElement){\r\n        this.width = canvas.offsetWidth;\r\n        this.height = canvas.offsetHeight;\r\n        this.clock = new THREE.Clock(false);\r\n    }\r\n    /**\r\n     * Updates all the datasets (graphed functions) in this canvas\r\n     */\r\n    abstract updateDataSets():void;\r\n    /**\r\n     * Called to render the root scene\r\n     */\r\n    abstract render(): void;\r\n    abstract onResize(): void;\r\n    /**\r\n     * Attaches this.domObject to the specified panel\r\n     */\r\n    public attach(): void {\r\n        this.pause = false;\r\n        this.canvas.appendChild(this.domObject);\r\n        this.clock.start();\r\n        this.animate();\r\n    }\r\n    /**\r\n     * Detaches this.domObject from the specified panel\r\n     */\r\n    public detach(): void {\r\n        this.clock.stop();\r\n        this.canvas.removeChild(this.domObject);\r\n        this.pause = true;\r\n    }\r\n    public animate(){\r\n        if(!this.pause)\r\n            requestAnimationFrame(this.animate);\r\n        this.updateDataSets();\r\n        this.render();\r\n    }\r\n}\r\n\r\n/**\r\n * Standard 2D graphical representation\r\n */\r\nclass Graphics2D extends Graphics {\r\n    domObject: HTMLCanvasElement;\r\n    rootScene: PIXI.Container;\r\n    app: PIXI.Application;\r\n    private renderer: PIXI.Renderer;\r\n    lc: Locator;\r\n    constructor(public canvas: HTMLDivElement, public id = \"g2d\") {\r\n        super(canvas);\r\n        this.app = new PIXI.Application({\r\n            width: this.width,\r\n            height: this.height,\r\n            antialias: true, // default: false\r\n            transparent: true, // default: false\r\n            resolution: 1 // default: 1\r\n        });\r\n        this.domObject = this.app.view;\r\n        this.domObject.id = id;\r\n        //Setup root scene\r\n        this.rootScene = this.app.stage;\r\n        //Setup renderer\r\n        this.renderer = this.app.renderer;\r\n        this.app.renderer.autoDensity = true;\r\n        //purpose served by autoDensity which takes into acount of the window.devicePixelRatio\r\n        // this.renderer.resolution = window.devicePixelRatio; \r\n        this.renderer.resize(this.width, this.height);\r\n        this.lc = new Locator();\r\n        this.lc.A = [[30, 0, 0], [0, -30, 0], [0, 0, 0]];\r\n        this.lc.B = [this.width / 2, this.height / 2, 0];\r\n    }\r\n    updateDataSets() {\r\n\r\n    }\r\n    render() {\r\n        this.app.render();\r\n    }\r\n    onResize() {\r\n        this.width = this.canvas.offsetWidth;\r\n        this.height = this.canvas.offsetHeight;\r\n        this.lc.B = [this.width / 2, this.height / 2, 0]\r\n        this.renderer.resize(this.width, this.height);\r\n        $(this.canvas).outerWidth(this.width);\r\n        $(this.canvas).outerHeight(this.height);\r\n        this.updateDataSets();\r\n        this.render();\r\n    }\r\n}\r\n\r\n/**\r\n * Standard 3D graphical representation\r\n */\r\nclass Graphics3D extends Graphics {\r\n    domObject: HTMLCanvasElement;\r\n    rootScene: THREE.Scene;\r\n    private renderer:THREE.Renderer;\r\n    lights: {name?:THREE.Light}={};\r\n    camera: THREE.Camera;\r\n    lc: Locator;\r\n    constructor(public canvas:HTMLDivElement, public id = \"g3d\"){\r\n        super(canvas);\r\n        this.renderer = this.createWebGLRenderer();\r\n        this.domObject = this.renderer.domElement;\r\n        //Attach dom object\r\n        this.domObject.id = id;\r\n        //Create scene\r\n        this.rootScene = new THREE.Scene();\r\n        //Setup lighting\r\n        let topLight = new THREE.DirectionalLight(0xffffff, 0.5);\r\n        topLight.position.set(0, 0, 5);\r\n        this.addLight(\"top\", topLight);\r\n        let botLight = new THREE.DirectionalLight(0xffffff, 0.5);\r\n        botLight.position.set(0, 0, -5);\r\n        this.addLight(\"bot\", botLight);\r\n        let ambientLight = new THREE.AmbientLight(0xffffff, 0.5);\r\n        this.addLight(\"ambient\", ambientLight);\r\n        //Setup camera\r\n        this.camera=this.createPerspectiveCamera();\r\n        //Setup locator for cooridnate transformation\r\n        this.lc=new Locator();\r\n    }\r\n    public addLight(name: string, light:THREE.Light){\r\n        this.lights[name]=light;\r\n        this.rootScene.add(light);\r\n    }\r\n    public removeLight(name: string){\r\n        this.rootScene.remove(this.lights[name]);\r\n        delete this.lights[name];\r\n    }\r\n    private createWebGLRenderer():THREE.WebGLRenderer{\r\n        let renderer = new THREE.WebGLRenderer({\r\n            antialias: true,\r\n            alpha: true\r\n        });\r\n        renderer.setPixelRatio(window.devicePixelRatio);\r\n        renderer.setSize(this.width, this.height);\r\n        return renderer;\r\n    }\r\n    private createPerspectiveCamera():THREE.PerspectiveCamera{\r\n        let aspect = this.width / this.height;\r\n        let camera = new THREE.PerspectiveCamera(75, aspect, 0.01, 500);\r\n        camera.position.y = -5;\r\n        camera.lookAt(0, 0, 0);\r\n        camera.up.set(0, 0, 1);\r\n        return camera\r\n    }\r\n    updateDataSets(){\r\n\r\n    }\r\n    render(){\r\n        this.renderer.render(this.rootScene, this.camera);\r\n    }\r\n    onResize() {\r\n        this.width = this.canvas.offsetWidth;\r\n        this.height = this.canvas.offsetHeight;\r\n        this.renderer.setSize(this.width, this.height);\r\n        if(this.camera instanceof THREE.PerspectiveCamera){\r\n            this.camera.aspect = this.width / this.height;\r\n            this.camera.updateProjectionMatrix();\r\n        }\r\n        if (this.camera instanceof THREE.OrthographicCamera)\r\n            this.camera.updateProjectionMatrix();\r\n        this.renderer.render(this.rootScene, this.camera);\r\n    }\r\n}\r\n\r\nexport {\r\n    Graphics,\r\n    Graphics2D,\r\n    Graphics3D\r\n}"],"file":"graphics.js"}