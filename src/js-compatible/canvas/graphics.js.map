{"version":3,"sources":["../../js/canvas/graphics.ts"],"names":["Graphics","canvas","id","syncTargets","Map","domObject","rootScene","gridPainter","graphs","Width","Height","I","lc","clock","pause","gridStyle","offsetWidth","offsetHeight","THREE","Clock","axisColors","origin","pointer","pointerSize","markColors","undefined","synchronize","Dataset","removeDataset","graphics","removeGraph","intervals","computeIntervals","item","initialize","update","initialized","appendChild","window","addEventListener","onResize","bind","start","startAnimation","stop","onresize","removeEventListener","requestAnimationFrame","animate","anotherMethod","updateGraphs","render","console","log","Error","set","Graphics2D","app","renderer","PIXI","Application","width","height","antialias","transparent","resolution","view","stage","autoDensity","resize","Locator","A","B","DragControl","document","body","e","scalex","Math","max","deltaY","scaley","scalez","X","Y","mousedown","newX","clientX","newY","clientY","delta","xyz","deltax","deltay","Intervals","i","holder","dataset","color","material","addDataset","graph","PIXIGraph","addGraph","addChild","PIXIObject","marks","grid","PIXIGrid","Graphics3D","lights","camera","control","createWebGLRenderer","domElement","Scene","topLight","DirectionalLight","position","addLight","botLight","ambientLight","AmbientLight","createPerspectiveCamera","OrbitControls","getInterval","name","light","add","remove","WebGLRenderer","alpha","setPixelRatio","devicePixelRatio","setSize","aspect","PerspectiveCamera","y","lookAt","up","min","THREEGraph","THREEObject","THREEGrid","updateProjectionMatrix","OrthographicCamera"],"mappings":"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","sourcesContent":["//Module import\r\nimport * as THREE from 'three';\r\nimport './controls';\r\nimport * as PIXI from 'pixi.js';\r\nimport { Locator } from './locator';\r\nimport 'jquery';\r\nimport { Dataset } from './types';\r\nimport { Graph, PIXIGrid, THREEGrid, PIXIGraph, THREEGraph } from './graph';\r\nimport {subtract} from '../utility';\r\n/**\r\n * A wrapper around THREE and PIXI rendering engines to give them the same syntax \r\n * to handle with.\r\n */\r\nabstract class Graphics {\r\n    abstract id: string;\r\n    syncTargets: Map<string, Graphics> = new Map();\r\n    abstract domObject: HTMLCanvasElement;\r\n    abstract rootScene: any;\r\n    protected gridPainter: Graph | undefined;\r\n    protected graphs: Map<string, Graph> = new Map();\r\n    /**\r\n     * Corresponds to the width of the canvas expressed in pixels\r\n     */\r\n    Width: number;\r\n    /**\r\n     * Corresponds to the height of the canvas expressed in pixels\r\n     */\r\n    Height: number;\r\n    /**\r\n     * The rendering interval of the Graphics\r\n     */\r\n    I: number[] = [];\r\n    abstract lc: Locator;\r\n    clock: THREE.Clock;\r\n    // /**\r\n    //  * Indicator for performed synchronization\r\n    //  */\r\n    // protected synchronized: boolean = true;\r\n    /**\r\n     * Pauses the asynchronous animation if set to true\r\n     */\r\n    pause: boolean = false;\r\n    gridStyle: {\r\n        axisColors: number[],\r\n        origin: number[],\r\n        pointer: string,\r\n        pointerSize: number,\r\n        markColors: number[][],\r\n    };\r\n    /**\r\n     * Initializes a common interface for graphics manipulations\r\n     * @param canvas The div in which the graphics renderer sits in\r\n     */\r\n    constructor(public canvas: HTMLDivElement) {\r\n        this.Width = canvas.offsetWidth;\r\n        this.Height = canvas.offsetHeight;\r\n        this.clock = new THREE.Clock(false);\r\n        this.gridStyle = {\r\n            axisColors: [0xff0000, 0x00ff00, 0x0000ff],\r\n            origin: [0, 0, 0],\r\n            pointer: \"arrow\",\r\n            pointerSize: 0.1,\r\n            markColors: [[0xbbbbbb, 0xdddddd],\r\n            [0xbbbbbb, 0xdddddd],\r\n            [0xbbbbbb, 0xdddddd]],\r\n        }\r\n        this.gridPainter = undefined;\r\n    }\r\n    /**\r\n     * Adds a dataset to the current list of datasets to this and all the synchronized targets\r\n     * @param dataset the dataset to be added, it has to have an id\r\n     * @param color \r\n     * @param material\r\n     * @param synchronize Whether the operation should be synchronized with the sync targets\r\n     * @returns the Graph object created that contains the dataset\r\n     */\r\n    abstract addDataset(dataset: Dataset, color: number, material?: THREE.Material, synchronize?: boolean): Graph;\r\n    /**\r\n     * Removes the specified dataset from this and all the synchronized targets\r\n     * @param id The id of the dataset to be removed\r\n     * @param synchronize Whether the operation should be synchronized with the sync targets\r\n     */\r\n    removeDataset(id: string, synchronize: boolean): void;\r\n    /**\r\n     * Removes the specified dataset from this and all the synchronized targets\r\n     * @param dataset The dataset to be removed\r\n     * @param synchronize Whether the operation should be synchronized with the sync targets\r\n     */\r\n    removeDataset(dataset: Dataset, synchronize: boolean): void;\r\n    removeDataset(id: string | Dataset, synchronize: boolean = true): void {\r\n        if (id instanceof Dataset) {\r\n            this.removeDataset(id.id, synchronize);\r\n        } else {\r\n            if (synchronize)\r\n                for (let graphics of this.syncTargets)\r\n                    graphics[1].removeDataset(id, false);\r\n            this.removeGraph(id, false);\r\n        }\r\n    }\r\n    /**\r\n     * Adds the graph to the Graphs list directly without initialization\r\n     * and that of all the synchronized targets\r\n     * @param graph the graph to be added\r\n     * @param synchronize Whether the operation should be synchronized with the sync targets\r\n     */\r\n    abstract addGraph(graph: Graph, synchronize: boolean)\r\n    /**\r\n     * Removes the specified graph from this and all the synchronized targets\r\n     * @param id The id of the graph to be removed\r\n     * @param synchronize Whether the operation should be synchronized with the sync targets\r\n     * @return whether the graph existed and has been successfully removed\r\n     */\r\n    removeGraph(id: string, synchronize?: boolean): boolean;\r\n    /**\r\n     * Removes the specified graph from this and all the synchronized targets\r\n     * @param dataset The graph to be removed\r\n     * @param synchronize Whether the operation should be synchronized with the sync targets\r\n     * @returns whether the graph existed and has been successfully removed\r\n     */\r\n    removeGraph(graph: Graph, synchronize?: boolean): boolean;\r\n    removeGraph(id: string | Graph, synchronize: boolean = true): boolean {\r\n        if (id instanceof Dataset) {\r\n            return this.removeGraph(id.id, synchronize);\r\n        } else {\r\n            if (synchronize)\r\n                for (let graphics of this.syncTargets)\r\n                    graphics[1].removeGraph(id as string, false);\r\n            return this.graphs.delete((id as string));\r\n        }\r\n    }\r\n    /**\r\n     * Adds a dynamic grid system to the graph, overrides the existing one\r\n     * @param origin the origin of the grid, where axes are extended from\r\n     * @param marks (intervals, holder)=> [x:[major:[mark 0:[x1, y1, z1], 1:[x2,y2,z2], ...],minor:[...]],\r\n     *                                     y:[major:[mark 0:[x1, y1, z1], 1:[x2,y2,z2], ...],...],...]\r\n     * @param gridStyle the colors of each axis, the style of trailing pointers, allowed values include \"arrow\", \"sphere\",\r\n     * \"none\", the size of the pointer, and the set of colors corresponding to major and minor marks in each direction\r\n     */\r\n    abstract addGrid(marks: (intervals: number[][], holder: number[][][][]) => number[][][][], gridStyle: {\r\n        axisColors: number[],\r\n        origin: number[],\r\n        pointer: string,\r\n        pointerSize: number,\r\n        markColors: number[][],\r\n    }): void;\r\n    /**\r\n     * removes the grid from the graph\r\n     */\r\n    removeGrid(): void {\r\n        this.gridPainter = undefined;\r\n    };\r\n    abstract computeIntervals(): number[][];\r\n    /**\r\n     * Initializes all the graphs that haven't been initialized\r\n     */\r\n    intializeGraphs() {\r\n        let intervals = this.computeIntervals();\r\n        for (let item of this.graphs) {\r\n            item[1].initialize(intervals);\r\n        }\r\n    }\r\n    /**\r\n     * Updates all the graphs in this canvas\r\n     */\r\n    updateGraphs() {\r\n        let intervals = this.computeIntervals();\r\n        if (this.gridPainter != undefined) this.gridPainter.update(intervals);\r\n        for (let item of this.graphs) {\r\n            if(!item[1].initialized){\r\n                item[1].initialize(intervals);\r\n            }\r\n            item[1].update(intervals);\r\n        }\r\n    }\r\n    /**\r\n     * Attaches this.domObject to the specified panel\r\n     */\r\n    public attach(): void {\r\n        this.canvas.appendChild(this.domObject);\r\n        window.addEventListener(\"resize\", this.onResize.bind(this));\r\n        this.clock.start();\r\n        this.startAnimation();\r\n    }\r\n    /**\r\n     * Detaches this.domObject from the specified panel\r\n     */\r\n    public detach(): void {\r\n        this.clock.stop();\r\n        this.canvas.onresize = () => { };\r\n        window.removeEventListener(\"resize\", this.onResize.bind(this));\r\n        this.pause = true;\r\n    }\r\n    public animate() {\r\n        if (!this.pause)\r\n            requestAnimationFrame(this.animate.bind(this));\r\n        requestAnimationFrame(this.anotherMethod);\r\n        this.updateGraphs();\r\n        this.render();\r\n    }\r\n    public anotherMethod(){\r\n        console.log('ran');\r\n    }\r\n    public startAnimation() {\r\n        this.pause = false;\r\n        this.animate();\r\n    }\r\n    public pauseAnimation() {\r\n        this.pause = true;\r\n    }\r\n    /**\r\n     * Called to render the root scene\r\n     */\r\n    abstract render(): void;\r\n    abstract onResize(): void;\r\n    public addSyncTarget(graphics: Graphics) {\r\n        if (graphics === this)\r\n            throw new Error(\"Cannot add self to the sync target list\");\r\n        this.syncTargets.set(graphics.id, graphics);\r\n    }\r\n    public removeSyncTarget(graphics: Graphics): boolean {\r\n        return this.syncTargets.delete(graphics.id);\r\n    }\r\n}\r\n\r\n/**\r\n * Standard 2D graphical representation\r\n */\r\nclass Graphics2D extends Graphics {\r\n    domObject: HTMLCanvasElement;\r\n    rootScene: PIXI.Container;\r\n    app: PIXI.Application;\r\n    private renderer: PIXI.Renderer;\r\n    lc: Locator;\r\n    protected graphs: Map<string, Graph> = new Map();\r\n    constructor(public canvas: HTMLDivElement, public id = \"g2d\") {\r\n        super(canvas);\r\n        this.app = new PIXI.Application({\r\n            width: this.Width,\r\n            height: this.Height,\r\n            antialias: true, // default: false\r\n            transparent: true, // default: false\r\n            resolution: 1 // default: 1\r\n        });\r\n        this.domObject = this.app.view;\r\n        this.domObject.id = id;\r\n        //Setup root scene\r\n        this.rootScene = this.app.stage;\r\n        //Setup renderer\r\n        this.renderer = this.app.renderer;\r\n        this.app.renderer.autoDensity = true;\r\n        //purpose served by autoDensity which takes into acount of the window.devicePixelRatio\r\n        // this.renderer.resolution = window.devicePixelRatio; \r\n        this.renderer.resize(this.Width, this.Height);\r\n        this.lc = new Locator();\r\n        this.lc.A = [[30, 0, 0], [0, -30, 0], [0, 0, 30]];\r\n        this.lc.B = [this.Width / 2, this.Height / 2, 0];\r\n        this.I[0] = this.Width;\r\n        this.I[1] = this.Height;\r\n        function DragControl(lc: Locator, canvas = document.body) {\r\n            canvas.addEventListener('wheel', (e) => {\r\n                lc.scalex /= Math.max(1 + e.deltaY * 0.001, 0.001);\r\n                lc.scaley /= Math.max(1 + e.deltaY * 0.001, 0.001);\r\n                lc.scalez /= Math.max(1 + e.deltaY * 0.001, 0.001);\r\n            })\r\n            var X, Y;\r\n            canvas.addEventListener('mousemove', (e) => {\r\n                if (mousedown) {\r\n                    var newX = e.clientX,\r\n                        newY = e.clientY;\r\n                    let delta =  subtract(lc.xyz(newX, newY, 0), lc.xyz(X, Y, 0));\r\n                    lc.deltax += delta[0];\r\n                    lc.deltay += delta[1];\r\n                    X = newX;\r\n                    Y = newY;\r\n                }\r\n            });\r\n            var mousedown = false;\r\n            canvas.addEventListener('mousedown', (e) => {\r\n                X = e.clientX;\r\n                Y = e.clientY;\r\n                mousedown = true;\r\n            });\r\n            window.addEventListener('mouseup', (e) => {\r\n                mousedown = false;\r\n            })\r\n        }\r\n        DragControl(this.lc, this.canvas);\r\n    }\r\n    computeIntervals(): number[][] {\r\n        let Intervals = [[0, this.Width], [this.Height, 0]];\r\n        let intervals: number[][] = [[], []];\r\n        for (let i = 0; i < 2; i++) {\r\n            let holder = [0, 0, 0];\r\n            holder[i] = Intervals[i][0];\r\n            intervals[i][0] = this.lc.xyz(...holder)[i];\r\n            holder[i] = Intervals[i][1];\r\n            intervals[i][1] = this.lc.xyz(...holder)[i];\r\n        }\r\n        return intervals;\r\n    }\r\n    addDataset(dataset: Dataset, color: number, material?: THREE.Material, synchronize = true): Graph {\r\n        if (synchronize)\r\n            for (let item of this.syncTargets) {\r\n                item[1].addDataset(dataset, color, undefined, synchronize);\r\n            }\r\n        if (dataset.id != undefined) {\r\n            let graph = new PIXIGraph(dataset, this, color);\r\n            this.addGraph(graph, false);\r\n            return graph;\r\n        }\r\n        else throw new Error(\"Failed to add dataset, the id of \" + dataset + \" is not defined\");\r\n    }\r\n    addGraph(graph: PIXIGraph, synchronize: boolean = true) {\r\n        if (synchronize)\r\n            for (let item of this.syncTargets)\r\n                item[1].addGraph(graph, false);\r\n        this.graphs.set(graph.id, graph);\r\n        this.rootScene.addChild(graph.PIXIObject);\r\n    }\r\n    addGrid(marks: (intervals: number[][], holder: number[][][][]) => number[][][][], gridStyle = {\r\n        axisColors: [0x777777, 0x777777, 0x777777],\r\n        origin: [0, 0, 0],\r\n        pointer: \"arrow\",\r\n        pointerSize: 2,\r\n        markColors: [[0x999999, 0xbbbbbb], [0x999999, 0xbbbbbb], [0x999999, 0xbbbbbb]],\r\n    }): void {\r\n        /*[x:[major:[mark 0:[x1, y1, z1], 1:[x2,y2,z2], ...],minor:[...]],\r\n     *                                     y:[major:[mark 0:[x1, y1, z1], 1:[x2,y2,z2], ...],...],...]\r\n     */\r\n        let holder = [[[[0, 0, 0]], [[0, 0, 0]]], [[[0, 0, 0]], [[0, 0, 0]]]];\r\n        let grid = new PIXIGrid(\"*PIXIGrid\",this, (intervals: number[][]) => marks(intervals, holder), gridStyle);\r\n        this.rootScene.addChild(grid.PIXIObject);\r\n        this.gridPainter = grid;\r\n    };\r\n    render() {\r\n        this.app.render();\r\n    }\r\n    onResize() {\r\n        this.Width = this.canvas.offsetWidth;\r\n        this.Height = this.canvas.offsetHeight;\r\n        this.lc.B = [this.Width / 2, this.Height / 2, 0]\r\n        this.renderer.resize(this.Width, this.Height);\r\n        // $(this.canvas).outerWidth(this.width);\r\n        // $(this.canvas).outerHeight(this.height);\r\n        this.updateGraphs();\r\n        this.render();\r\n    }\r\n}\r\n\r\n/**\r\n * Standard 3D graphical representation\r\n */\r\nclass Graphics3D extends Graphics {\r\n    domObject: HTMLCanvasElement;\r\n    rootScene: THREE.Scene;\r\n    private renderer: THREE.Renderer;\r\n    lights: { name?: THREE.Light } = {};\r\n    camera: THREE.Camera;\r\n    control: any;\r\n    lc: Locator;\r\n    protected graphs: Map<string, THREEGraph> = new Map();\r\n    constructor(public canvas: HTMLDivElement, public id = \"g3d\") {\r\n        super(canvas);\r\n        this.renderer = this.createWebGLRenderer();\r\n        this.domObject = this.renderer.domElement;\r\n        //Attach dom object\r\n        this.domObject.id = id;\r\n        //Create scene\r\n        this.rootScene = new THREE.Scene();\r\n        //Setup lighting\r\n        let topLight = new THREE.DirectionalLight(0xffffff, 0.5);\r\n        topLight.position.set(0, 0, 5);\r\n        this.addLight(\"top\", topLight);\r\n        let botLight = new THREE.DirectionalLight(0xffffff, 0.5);\r\n        botLight.position.set(0, 0, -5);\r\n        this.addLight(\"bot\", botLight);\r\n        let ambientLight = new THREE.AmbientLight(0xffffff, 0.5);\r\n        this.addLight(\"ambient\", ambientLight);\r\n        //Setup camera\r\n        this.camera = this.createPerspectiveCamera();\r\n        //Setup locator for cooridnate transformation\r\n        this.lc = new Locator();\r\n        // @ts-ignore\r\n        this.control = new THREE.OrbitControls(this.camera, this.domObject);\r\n        this.I[0] = this.I[1] = this.I[2] = this.getInterval();\r\n    }\r\n    public addLight(name: string, light: THREE.Light) {\r\n        this.lights[name] = light;\r\n        this.rootScene.add(light);\r\n    }\r\n    public removeLight(name: string) {\r\n        this.rootScene.remove(this.lights[name]);\r\n        delete this.lights[name];\r\n    }\r\n    private createWebGLRenderer(): THREE.WebGLRenderer {\r\n        let renderer = new THREE.WebGLRenderer({\r\n            antialias: true,\r\n            alpha: true\r\n        });\r\n        renderer.setPixelRatio(window.devicePixelRatio);\r\n        renderer.setSize(this.Width, this.Height);\r\n        return renderer;\r\n    }\r\n    private createPerspectiveCamera(): THREE.PerspectiveCamera {\r\n        let aspect = this.Width / this.Height;\r\n        let camera = new THREE.PerspectiveCamera(75, aspect, 0.01, 500);\r\n        camera.position.y = -10;\r\n        camera.lookAt(0, 0, 0);\r\n        camera.up.set(0, 0, 1);\r\n        return camera;\r\n    }\r\n    computeIntervals(): number[][] {\r\n        let Intervals = [[-5, 5], [-5, 5], [-5, 5]]\r\n        let intervals: number[][] = [[], [], []];\r\n        for (let i = 0; i < 3; i++) {\r\n            let holder = [0, 0, 0];\r\n            holder[i] = Intervals[i][0];\r\n            intervals[i][0] = this.lc.xyz(...holder)[i];\r\n            holder[i] = Intervals[i][1];\r\n            intervals[i][1] = this.lc.xyz(...holder)[i];\r\n        }\r\n        return intervals;\r\n    }\r\n    private getInterval(): number {\r\n        return Math.min(this.Width, this.Height) * 4 / 5;\r\n    }\r\n    /**\r\n     * Adds a dataset to the current list of datasets to this and all the synchronized targets\r\n     * @param dataset the dataset to be added, it has to have an id\r\n     * @param synchronize Whether the operation should be synchronized with the sync targets\r\n     * @returns the Graph object created that contains the dataset\r\n     */\r\n    addDataset(dataset: Dataset, color: number, material?: THREE.Material, synchronize = true): Graph {\r\n        if (synchronize)\r\n            for (let graphics of this.syncTargets) {\r\n                graphics[1].addDataset(dataset, color, material, false);\r\n            }\r\n        if (dataset.id != undefined) {\r\n            let graph = new THREEGraph(dataset, this, color, material);\r\n            this.addGraph(graph, false);\r\n            return graph;\r\n        }\r\n        else throw new Error(\"Failed to add dataset, the id of \" + dataset + \" is not defined\");\r\n    }\r\n    addGraph(graph: THREEGraph, synchronize: boolean = true) {\r\n        if (synchronize)\r\n            for (let item of this.syncTargets)\r\n                item[1].addGraph(graph, false);\r\n        this.graphs.set(graph.id, graph);\r\n        this.rootScene.add(graph.THREEObject);\r\n    }\r\n    addGrid(marks: (intervals: number[][], holder: number[][][][]) => number[][][][], gridStyle = {\r\n        axisColors: [0x777777, 0x777777, 0x777777],\r\n        origin: [0, 0, 0],\r\n        pointer: \"arrow\",\r\n        pointerSize: 2,\r\n        markColors: [[0x999999, 0xbbbbbb], [0x999999, 0xbbbbbb], [0x999999, 0xbbbbbb]],\r\n    }): void {\r\n        let holder = [[[[0, 0, 0]], [[0, 0, 0]]], [[[0, 0, 0]], [[0, 0, 0]]], [[[0, 0, 0]], [[0, 0, 0]]]];\r\n        let grid = new THREEGrid(\"*THREEGrid\", this, (intervals: number[][]) => marks(intervals, holder), gridStyle);\r\n        this.rootScene.add(grid.THREEObject);\r\n        this.gridPainter = grid;\r\n    };\r\n    removeGrid(){\r\n        super.removeGrid();\r\n        this.rootScene.remove((this.gridPainter as THREEGrid).THREEObject);\r\n    }\r\n    render() {\r\n        this.renderer.render(this.rootScene, this.camera);\r\n    }\r\n    onResize() {\r\n        this.Width = this.canvas.offsetWidth;\r\n        this.Height = this.canvas.offsetHeight;\r\n        // $(this.canvas).outerWidth(this.width);\r\n        // $(this.canvas).outerHeight(this.height);\r\n        this.renderer.setSize(this.Width, this.Height);\r\n        if (this.camera instanceof THREE.PerspectiveCamera) {\r\n            this.camera.aspect = this.Width / this.Height;\r\n            this.camera.updateProjectionMatrix();\r\n        }\r\n        if (this.camera instanceof THREE.OrthographicCamera)\r\n            this.camera.updateProjectionMatrix();\r\n        this.renderer.render(this.rootScene, this.camera);\r\n    }\r\n}\r\n\r\nexport {\r\n    Graphics,\r\n    Graphics2D,\r\n    Graphics3D,\r\n}"],"file":"graphics.js"}