{"version":3,"sources":["../../js/canvas/graphics.ts"],"names":["Graphics","canvas","id","syncTargets","Map","domObject","rootScene","graphs","width","height","lc","clock","pause","offsetWidth","offsetHeight","THREE","Clock","dataset","color","material","graphics","addDataset","undefined","graph","Graph","addGraph","Error","Dataset","removeGraph","removeDataset","set","appendChild","initializeGraphs","start","startAnimation","stop","removeChild","requestAnimationFrame","animate","updateGraphs","render","Graphics2D","app","renderer","PIXI","Application","antialias","transparent","resolution","view","stage","autoDensity","resize","Locator","A","B","$","outerWidth","outerHeight","Graphics3D","lights","camera","createWebGLRenderer","domElement","Scene","topLight","DirectionalLight","position","addLight","botLight","ambientLight","AmbientLight","createPerspectiveCamera","name","light","add","remove","WebGLRenderer","alpha","setPixelRatio","window","devicePixelRatio","setSize","aspect","PerspectiveCamera","y","lookAt","up","updateProjectionMatrix","OrthographicCamera"],"mappings":"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","sourcesContent":["//Module import\r\nimport * as THREE from 'three';\r\nimport * as PIXI from 'pixi.js';\r\nimport {Locator} from './locator';\r\nimport 'jquery';\r\nimport { Dataset } from './types';\r\nimport { Graph } from './graph';\r\n/**\r\n * A wrapper around THREE and PIXI rendering engines to give them the same syntax \r\n * to handle with.\r\n */\r\nabstract class Graphics {\r\n    abstract id: string;\r\n    syncTargets: Map<string,Graphics>=new Map();\r\n    abstract domObject: HTMLCanvasElement;\r\n    abstract rootScene: any;\r\n    protected graphs: Map<string, Graph>=new Map();\r\n    width:number;\r\n    height: number;\r\n    abstract lc: Locator;\r\n    clock: THREE.Clock;\r\n    /**\r\n     * Pauses the asynchronous animation if set to true\r\n     */\r\n    pause: boolean = false;\r\n    /**\r\n     * Initializes a common interface for graphics manipulations\r\n     * @param canvas The div in which the graphics renderer sits in\r\n     */\r\n    constructor(public canvas:HTMLDivElement){\r\n        this.width = canvas.offsetWidth;\r\n        this.height = canvas.offsetHeight;\r\n        this.clock = new THREE.Clock(false);\r\n    }\r\n    /**\r\n     * Adds a dataset to the current list of datasets to this and all the synchronized targets\r\n     * @param dataset the dataset to be added, it has to have an id\r\n     * @returns the Graph object created that contains the dataset\r\n     */\r\n    addDataset(dataset: Dataset, color: number, material?:THREE.Material):Graph{\r\n        for(let graphics of this.syncTargets){\r\n            graphics[1].addDataset(dataset, color, material);\r\n        }\r\n        if(dataset.id != undefined){\r\n            let graph = new Graph(dataset, this, color, material);\r\n            this.addGraph(graph);\r\n            return graph;\r\n        }\r\n        else throw new Error(\"Failed to add dataset, the id of \"+dataset+\" is not defined\");\r\n    }\r\n    /**\r\n     * Removes the specified dataset from this and all the synchronized targets\r\n     * @param id The id of the dataset to be removed\r\n     */\r\n    removeDataset(id: string):void;\r\n    /**\r\n     * Removes the specified dataset from this and all the synchronized targets\r\n     * @param dataset The dataset to be removed\r\n     */\r\n    removeDataset(dataset: Dataset): void;\r\n    removeDataset(id: string|Dataset):void{\r\n        if(id instanceof Dataset){\r\n            this.removeGraph(id.id);\r\n        }else{\r\n            for (let graphics of this.syncTargets)\r\n                graphics[1].removeDataset(id);\r\n            this.removeGraph(id);\r\n        }\r\n    }\r\n    /**\r\n     * Adds the graph to the Graphs list directly without initialization\r\n     * to this and all the synchronized targets\r\n     * @param graph the graph to be added\r\n     */\r\n    addGraph(graph: Graph){\r\n        for (let graphics of this.syncTargets)\r\n            graphics[1].addGraph(graph);\r\n        this.graphs.set(graph.id, graph);\r\n    }\r\n    \r\n    /**\r\n     * Removes the specified graph from this and all the synchronized targets\r\n     * @param id The id of the graph to be removed\r\n     * @return whether the graph existed and has been successfully removed\r\n     */\r\n    removeGraph(id: string): boolean;\r\n    /**\r\n     * Removes the specified graph from this and all the synchronized targets\r\n     * @param dataset The graph to be removed\r\n     * @returns whether the graph existed and has been successfully removed\r\n     */\r\n    removeGraph(graph: Graph): boolean;\r\n    removeGraph(id: string | Graph): boolean {\r\n        if (id instanceof Dataset) {\r\n            return this.removeGraph(id.id);\r\n        } else {\r\n            for (let graphics of this.syncTargets)\r\n                graphics[1].removeGraph(id as string);\r\n            return this.graphs.delete((id as string));\r\n        }\r\n    }\r\n    /**\r\n     * Initializes all the renderer related fields in graphs that hasn't been intialized\r\n     */\r\n    abstract initializeGraphs(): void;\r\n    /**\r\n     * Updates all the graphs in this canvas\r\n     */\r\n    abstract updateGraphs():void;\r\n    /**\r\n     * Attaches this.domObject to the specified panel\r\n     */\r\n    public attach(): void {\r\n        this.canvas.appendChild(this.domObject);\r\n        this.initializeGraphs();\r\n        this.clock.start();\r\n        this.startAnimation();\r\n    }\r\n    /**\r\n     * Detaches this.domObject from the specified panel\r\n     */\r\n    public detach(): void {\r\n        this.clock.stop();\r\n        this.canvas.removeChild(this.domObject);\r\n        this.pause = true;\r\n    }\r\n    public animate(){\r\n        if(!this.pause)\r\n            requestAnimationFrame(this.animate);\r\n        this.updateGraphs();\r\n        this.render();\r\n    }\r\n    public startAnimation(){\r\n        this.pause=false;\r\n        this.animate();\r\n    }\r\n    public pauseAnimation(){\r\n        this.pause = true;\r\n    }\r\n    /**\r\n     * Called to render the root scene\r\n     */\r\n    abstract render(): void;\r\n    abstract onResize(): void;\r\n    public addSyncTarget(graphics: Graphics){\r\n        if(graphics===this)\r\n            throw new Error(\"Cannot add self to the sync target list\");\r\n        this.syncTargets.set(graphics.id, graphics);\r\n    }\r\n    public removeSyncTarget(graphics: Graphics): boolean{\r\n        return this.syncTargets.delete(graphics.id);\r\n    }\r\n}\r\n\r\n/**\r\n * Standard 2D graphical representation\r\n */\r\nclass Graphics2D extends Graphics {\r\n    domObject: HTMLCanvasElement;\r\n    rootScene: PIXI.Container;\r\n    app: PIXI.Application;\r\n    private renderer: PIXI.Renderer;\r\n    lc: Locator;\r\n    constructor(public canvas: HTMLDivElement, public id = \"g2d\") {\r\n        super(canvas);\r\n        this.app = new PIXI.Application({\r\n            width: this.width,\r\n            height: this.height,\r\n            antialias: true, // default: false\r\n            transparent: true, // default: false\r\n            resolution: 1 // default: 1\r\n        });\r\n        this.domObject = this.app.view;\r\n        this.domObject.id = id;\r\n        //Setup root scene\r\n        this.rootScene = this.app.stage;\r\n        //Setup renderer\r\n        this.renderer = this.app.renderer;\r\n        this.app.renderer.autoDensity = true;\r\n        //purpose served by autoDensity which takes into acount of the window.devicePixelRatio\r\n        // this.renderer.resolution = window.devicePixelRatio; \r\n        this.renderer.resize(this.width, this.height);\r\n        this.lc = new Locator();\r\n        this.lc.A = [[30, 0, 0], [0, -30, 0], [0, 0, 0]];\r\n        this.lc.B = [this.width / 2, this.height / 2, 0];\r\n    }\r\n    addDataset(dataset: Dataset, color: number): Graph {\r\n        return super.addDataset(dataset, color);\r\n    }\r\n    initializeGraphs(){\r\n\r\n    }\r\n    updateGraphs() {\r\n\r\n    }\r\n    render() {\r\n        this.app.render();\r\n    }\r\n    onResize() {\r\n        this.width = this.canvas.offsetWidth;\r\n        this.height = this.canvas.offsetHeight;\r\n        this.lc.B = [this.width / 2, this.height / 2, 0]\r\n        this.renderer.resize(this.width, this.height);\r\n        $(this.canvas).outerWidth(this.width);\r\n        $(this.canvas).outerHeight(this.height);\r\n        this.updateGraphs();\r\n        this.render();\r\n    }\r\n}\r\n\r\n/**\r\n * Standard 3D graphical representation\r\n */\r\nclass Graphics3D extends Graphics {\r\n    domObject: HTMLCanvasElement;\r\n    rootScene: THREE.Scene;\r\n    private renderer:THREE.Renderer;\r\n    lights: {name?:THREE.Light}={};\r\n    camera: THREE.Camera;\r\n    lc: Locator;\r\n    constructor(public canvas:HTMLDivElement, public id = \"g3d\"){\r\n        super(canvas);\r\n        this.renderer = this.createWebGLRenderer();\r\n        this.domObject = this.renderer.domElement;\r\n        //Attach dom object\r\n        this.domObject.id = id;\r\n        //Create scene\r\n        this.rootScene = new THREE.Scene();\r\n        //Setup lighting\r\n        let topLight = new THREE.DirectionalLight(0xffffff, 0.5);\r\n        topLight.position.set(0, 0, 5);\r\n        this.addLight(\"top\", topLight);\r\n        let botLight = new THREE.DirectionalLight(0xffffff, 0.5);\r\n        botLight.position.set(0, 0, -5);\r\n        this.addLight(\"bot\", botLight);\r\n        let ambientLight = new THREE.AmbientLight(0xffffff, 0.5);\r\n        this.addLight(\"ambient\", ambientLight);\r\n        //Setup camera\r\n        this.camera=this.createPerspectiveCamera();\r\n        //Setup locator for cooridnate transformation\r\n        this.lc=new Locator();\r\n    }\r\n    public addLight(name: string, light:THREE.Light){\r\n        this.lights[name]=light;\r\n        this.rootScene.add(light);\r\n    }\r\n    public removeLight(name: string){\r\n        this.rootScene.remove(this.lights[name]);\r\n        delete this.lights[name];\r\n    }\r\n    private createWebGLRenderer():THREE.WebGLRenderer{\r\n        let renderer = new THREE.WebGLRenderer({\r\n            antialias: true,\r\n            alpha: true\r\n        });\r\n        renderer.setPixelRatio(window.devicePixelRatio);\r\n        renderer.setSize(this.width, this.height);\r\n        return renderer;\r\n    }\r\n    private createPerspectiveCamera():THREE.PerspectiveCamera{\r\n        let aspect = this.width / this.height;\r\n        let camera = new THREE.PerspectiveCamera(75, aspect, 0.01, 500);\r\n        camera.position.y = -5;\r\n        camera.lookAt(0, 0, 0);\r\n        camera.up.set(0, 0, 1);\r\n        return camera;\r\n    }\r\n    initializeGraphs(){\r\n\r\n    }\r\n    updateGraphs(){\r\n\r\n    }\r\n    render(){\r\n        this.renderer.render(this.rootScene, this.camera);\r\n    }\r\n    onResize() {\r\n        this.width = this.canvas.offsetWidth;\r\n        this.height = this.canvas.offsetHeight;\r\n        this.renderer.setSize(this.width, this.height);\r\n        if(this.camera instanceof THREE.PerspectiveCamera){\r\n            this.camera.aspect = this.width / this.height;\r\n            this.camera.updateProjectionMatrix();\r\n        }\r\n        if (this.camera instanceof THREE.OrthographicCamera)\r\n            this.camera.updateProjectionMatrix();\r\n        this.renderer.render(this.rootScene, this.camera);\r\n    }\r\n}\r\n\r\nexport {\r\n    Graphics,\r\n    Graphics2D,\r\n    Graphics3D,\r\n}"],"file":"graphics.js"}