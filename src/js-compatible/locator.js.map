{"version":3,"sources":["../js/locator.ts"],"names":["Locator","lc","scalex","scaley","scalez","deltax","deltay","deltaz","A","validateT","target","property","value","Ainverse","utility","inv","undefined","Error","T","Proxy","set","B","_standardMatrix","_graphicalMatrix","_subtractionMatrix","console","log","virCoord","checkCoord","coord","dotArray","virtualToStandard","X","Y","Z","width","getElement","subtract","virtualToGraphical","slice","height","length","graCoord","pinX","factorx","pinY","factory","pinZ","factorz","pinxyz","xyz","exports"],"mappings":";;;;AAAA;;;;;;;;;;;;;;;;;;;;AACA;IACMA,O;;;AAEF;AAEA;AAGA;AAEA;AAGA;AAYA;AAKA;AAEA,qBAAa;AAAA;;AAAA;;AAAA,SA9BbC,EA8Ba,GA9BR,IA8BQ;AAAA,SA5BbC,MA4Ba,GA5BJ,CA4BI;AAAA,SA1BbC,MA0Ba,GA1BJ,CA0BI;AAAA,SAzBbC,MAyBa,GAzBJ,CAyBI;AAAA,SAvBbC,MAuBa,GAvBJ,CAuBI;AAAA,SArBbC,MAqBa,GArBJ,CAqBI;AAAA,SApBbC,MAoBa,GApBJ,CAoBI;AAAA,SAlBLC,CAkBK,GAlBD,CAAC,CAAC,GAAD,EAAK,CAAL,EAAO,CAAP,CAAD,EACA,CAAC,CAAD,EAAG,GAAH,EAAO,CAAP,CADA,EAEA,CAAC,CAAD,EAAG,CAAH,EAAK,GAAL,CAFA,CAkBC;;AAAA,SAfbC,SAea,GAfD,UAACC,MAAD,EAASC,QAAT,EAAmBC,KAAnB,EAA2B;AACnC,UAAIC,QAAQ,GAAIC,OAAO,CAACC,GAAR,CAAYH,KAAZ,CAAhB;AACA,UAAGC,QAAQ,IAAEG,SAAb,EACI,KAAI,CAACH,QAAL,GAAgBA,QAAhB,CADJ,KAEK,MAAM,IAAII,KAAJ,CAAU,+CAAV,CAAN;AACLP,MAAAA,MAAM,CAACC,QAAD,CAAN,GAAmBC,KAAnB;AACA,aAAO,IAAP;AACH,KAQY;;AAAA,SANbM,CAMa,GANT,IAAIC,KAAJ,CAAU,KAAKX,CAAf,EAAkB;AAClBY,MAAAA,GAAG,EAAE,KAAKX;AADQ,KAAlB,CAMS;AAAA,SAHbY,CAGa,GAHT,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,CAGS;AAAA,SADbR,QACa;AAAA,SAILS,eAJK,GAIW,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,CAJX;AAAA,SA2BLC,gBA3BK,GA2Bc,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,CA3Bd;AAAA,SAyELC,kBAzEK,GAyEgB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAzEhB;AACTC,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKL,CAAjB;AACA,SAAKR,QAAL,GAAiBC,OAAO,CAACC,GAAR,CAAY,KAAKP,CAAjB,CAAjB;AACH;;;;;AAED;;;;sCAI0BmB,Q,EAA4B;AAClD,WAAKC,UAAL,CAAgBD,QAAhB;AACA,WAAKL,eAAL,CAAqB,CAArB,IAA0B,CAACK,QAAQ,CAAC,CAAD,CAAR,GAAY,KAAKtB,MAAlB,IAA0B,KAAKH,MAAzD;AACA,WAAKoB,eAAL,CAAqB,CAArB,IAA0B,CAACK,QAAQ,CAAC,CAAD,CAAR,GAAY,KAAKrB,MAAlB,IAA0B,KAAKH,MAAzD;AACA,WAAKmB,eAAL,CAAqB,CAArB,IAA0B,CAACK,QAAQ,CAAC,CAAD,CAAR,GAAY,KAAKpB,MAAlB,IAA0B,KAAKH,MAAzD;AACA,aAAO,KAAKkB,eAAZ;AACH,K,CACD;;;;wBACmC;AAAA,wCAAvBO,KAAuB;AAAvBA,QAAAA,KAAuB;AAAA;;AAC/B,aAAOf,OAAO,CAACgB,QAAR,CAAiB,KAAKZ,CAAL,CAAO,CAAP,CAAjB,EAA4B,KAAKa,iBAAL,CAAuBF,KAAvB,CAA5B,IAA2D,KAAKR,CAAL,CAAO,CAAP,CAAlE;AACH,K,CACD;;;;wBACqC;AAAA,yCAAzBQ,KAAyB;AAAzBA,QAAAA,KAAyB;AAAA;;AACjC,aAAOf,OAAO,CAACgB,QAAR,CAAiB,KAAKZ,CAAL,CAAO,CAAP,CAAjB,EAA4B,KAAKa,iBAAL,CAAuBF,KAAvB,CAA5B,IAA6D,KAAKR,CAAL,CAAO,CAAP,CAApE;AACH;;;wBACoC;AAAA,yCAAzBQ,KAAyB;AAAzBA,QAAAA,KAAyB;AAAA;;AACjC,aAAOf,OAAO,CAACgB,QAAR,CAAiB,KAAKZ,CAAL,CAAO,CAAP,CAAjB,EAA4B,KAAKa,iBAAL,CAAuBF,KAAvB,CAA5B,IAA6D,KAAKR,CAAL,CAAO,CAAP,CAApE;AACH;;;uCAE0BM,Q,EAA4B;AAC/C,WAAKJ,gBAAL,CAAsB,CAAtB,IAA2B,KAAKS,CAAL,gCAAUL,QAAV,EAA3B;AACA,WAAKJ,gBAAL,CAAsB,CAAtB,IAA2B,KAAKU,CAAL,gCAAUN,QAAV,EAA3B;AACA,WAAKJ,gBAAL,CAAsB,CAAtB,IAA2B,KAAKW,CAAL,gCAAUP,QAAV,EAA3B;AACJ,aAAO,KAAKJ,gBAAZ;AACH;AACD;;;;;;;;;0BAMaY,K,EAAeC,U,EAAoC;AAC5D,UAAGA,UAAH,EAAc;AACV,eAAO,KAAKJ,CAAL,CAAOG,KAAP,EAAa,CAAb,EAAe,CAAf,IAAkB,KAAKH,CAAL,CAAO,CAAP,EAAS,CAAT,EAAW,CAAX,CAAzB;AACH,OAFD,MAEK;AACD,eAAQlB,OAAO,CAACuB,QAAR,CAAiB,KAAKC,kBAAL,CAAwB,CAACH,KAAD,EAAQ,CAAR,EAAW,CAAX,CAAxB,EAAuCI,KAAvC,EAAjB,EAAiE,KAAKD,kBAAL,CAAwB,CAACH,KAAD,EAAQ,CAAR,EAAW,CAAX,CAAxB,CAAjE,CAAR;AACH;AACJ;AACD;;;;;;;;;2BAMcK,M,EAAgBJ,U,EAAqC;AAC/D,UAAIA,UAAJ,EAAgB;AACZ,eAAO,KAAKH,CAAL,CAAO,CAAP,EAAUO,MAAV,EAAkB,CAAlB,IAAuB,KAAKP,CAAL,CAAO,CAAP,EAAU,CAAV,EAAa,CAAb,CAA9B;AACH,OAFD,MAEO;AACH,eAAQnB,OAAO,CAACuB,QAAR,CAAiB,KAAKC,kBAAL,CAAwB,CAAC,CAAD,EAAIE,MAAJ,EAAY,CAAZ,CAAxB,EAAwCD,KAAxC,EAAjB,EAAkE,KAAKD,kBAAL,CAAwB,CAAC,CAAD,EAAIE,MAAJ,EAAY,CAAZ,CAAxB,CAAlE,CAAR;AACH;AACJ;AACD;;;;;;;;;2BAMcC,M,EAAgBL,U,EAAqC;AAC/D,UAAIA,UAAJ,EAAgB;AACZ,eAAO,KAAKF,CAAL,CAAO,CAAP,EAAU,CAAV,EAAaO,MAAb,IAAuB,KAAKP,CAAL,CAAO,CAAP,EAAU,CAAV,EAAa,CAAb,CAA9B;AACH,OAFD,MAEO;AACH,eAAQpB,OAAO,CAACuB,QAAR,CAAiB,KAAKC,kBAAL,CAAwB,CAAC,CAAD,EAAI,CAAJ,EAAOG,MAAP,CAAxB,EAAwCF,KAAxC,EAAjB,EAAkE,KAAKD,kBAAL,CAAwB,CAAC,CAAD,EAAI,CAAJ,EAAOG,MAAP,CAAxB,CAAlE,CAAR;AACH;AACJ;;;;AAED;;;;;;;0BAO4C;AAAA,yCAA9BC,QAA8B;AAA9BA,QAAAA,QAA8B;AAAA;;AACxC,WAAKd,UAAL,CAAgBc,QAAhB;AACA,WAAKlB,kBAAL,GAA2BV,OAAO,CAACuB,QAAR,WAAqBK,QAArB,GAAgC,KAAKrB,CAArC,CAA3B;AACA,WAAKC,eAAL,CAAqB,CAArB,IAA0BR,OAAO,CAACgB,QAAR,CAAiB,KAAKZ,CAAL,CAAO,CAAP,CAAjB,EAA4B,KAAKM,kBAAjC,CAA1B;AACA,WAAKF,eAAL,CAAqB,CAArB,IAA0BR,OAAO,CAACgB,QAAR,CAAiB,KAAKZ,CAAL,CAAO,CAAP,CAAjB,EAA4B,KAAKM,kBAAjC,CAA1B;AACA,WAAKF,eAAL,CAAqB,CAArB,IAA0BR,OAAO,CAACgB,QAAR,CAAiB,KAAKZ,CAAL,CAAO,CAAP,CAAjB,EAA4B,KAAKM,kBAAjC,CAA1B;AACA;;;;AAGA,WAAKA,kBAAL,CAAwB,CAAxB,IAA6B,KAAKF,eAAL,CAAqB,CAArB,IAA0B,KAAKpB,MAA/B,GAAwC,KAAKG,MAA1E;AACA,WAAKmB,kBAAL,CAAwB,CAAxB,IAA6B,KAAKF,eAAL,CAAqB,CAArB,IAA0B,KAAKnB,MAA/B,GAAwC,KAAKG,MAA1E;AACA,WAAKkB,kBAAL,CAAwB,CAAxB,IAA6B,KAAKF,eAAL,CAAqB,CAArB,IAA0B,KAAKlB,MAA/B,GAAwC,KAAKG,MAA1E;AACA,aAAO,KAAKiB,kBAAZ;AACH,K,CACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;yBASYmB,I,EAAcC,O,EAAiBC,I,EAAcC,O,EAA4C;AAAA,UAA3BC,IAA2B,uEAApB,CAAoB;AAAA,UAAjBC,OAAiB,uEAAP,CAAO;AACjG,UAAIC,MAAM,GAAG,KAAKC,GAAL,CAASP,IAAT,EAAeE,IAAf,EAAqBE,IAArB,CAAb;AACA,WAAK7C,MAAL,IAAe0C,OAAf;AACA,WAAKzC,MAAL,IAAe2C,OAAf;AACA,WAAK1C,MAAL,IAAe4C,OAAf;AACA,WAAK3C,MAAL,GAAc,CAAC4C,MAAM,CAAC,CAAD,CAAN,GAAY,KAAK5C,MAAlB,IAA4BuC,OAA5B,GAAsCK,MAAM,CAAC,CAAD,CAA1D;AACA,WAAK3C,MAAL,GAAc,CAAC2C,MAAM,CAAC,CAAD,CAAN,GAAY,KAAK3C,MAAlB,IAA4BwC,OAA5B,GAAsCG,MAAM,CAAC,CAAD,CAA1D;AACA,WAAK1C,MAAL,GAAc,CAAC0C,MAAM,CAAC,CAAD,CAAN,GAAY,KAAK1C,MAAlB,IAA4BuC,OAA5B,GAAsCG,MAAM,CAAC,CAAD,CAA1D;AACH;AACD;;;;;;;+BAImBpB,K,EAAwB;AACvC,UAAIA,KAAK,CAACY,MAAN,IAAgB,CAApB,EAAuBZ,KAAK,CAAC,CAAD,CAAL,GAAW,CAAX;AACvB,aAAOA,KAAP;AACH;;;;;;AAELsB,OAAO,GAAC;AACJnD,EAAAA,OAAO,EAAPA;AADI,CAAR","sourcesContent":["import * as utility from './utility';\r\n//The class that converts virtual coordinate system to its graphics presentation\r\nclass Locator {\r\n    lc = this;\r\n    //Graphics x : standard x (intrinsic)\r\n    scalex = 1;\r\n    //Graphics y : standard y (intrinsic)\r\n    scaley = 1;\r\n    scalez = 1;\r\n    //Moves virtual coordinate deltax virtual units in the x direction\r\n    deltax = 1;\r\n    //Moves virtual coordinate deltay virtual units in the y direction\r\n    deltay = 1;\r\n    deltaz = 0;\r\n    //Transformation matrix used as: C = Ap+B\r\n    private A = [[1.5,0,0],\r\n                [0,1.5,0],\r\n                [0,0,1.5]];\r\n    validateT = (target, property, value)=>{\r\n        let Ainverse = (utility.inv(value) as number[][]);\r\n        if(Ainverse!=undefined)\r\n            this.Ainverse = Ainverse;\r\n        else throw new Error('Cannot calculate inverse, determinant is zero');\r\n        target[property] = value;\r\n        return true;\r\n    }\r\n    //T is the actual matrix that user manipulate to change the transformation\r\n    T = new Proxy(this.A, {\r\n        set: this.validateT\r\n    });\r\n    B = [0,0,0];\r\n    //Inverse transformation through: c = A^{-1}(C-B)\r\n    Ainverse:number[][];\r\n    constructor(){\r\n        console.log(this.B);\r\n        this.Ainverse = (utility.inv(this.A) as number[][]);\r\n    }\r\n    private _standardMatrix=[0,0,0];\r\n    /**\r\n     * Returns a matrix representing the standard coordinate of coord\r\n     * @param virCoord: a representation of a point in the virtual coordinate\r\n     */\r\n    private virtualToStandard(virCoord: number[]):number[]{\r\n        this.checkCoord(virCoord);\r\n        this._standardMatrix[0] = (virCoord[0]+this.deltax)*this.scalex;\r\n        this._standardMatrix[1] = (virCoord[1]+this.deltay)*this.scaley; \r\n        this._standardMatrix[2] = (virCoord[2]+this.deltaz)*this.scalez;\r\n        return this._standardMatrix\r\n    }\r\n    //To graphics X\r\n    public X(...coord: number[]):number{\r\n        return utility.dotArray(this.T[0], this.virtualToStandard(coord))+this.B[0];\r\n    }\r\n    //To graphics Y\r\n    public Y(...coord: number[]): number {\r\n        return utility.dotArray(this.T[1], this.virtualToStandard(coord)) + this.B[1];\r\n    }\r\n    public Z(...coord: number[]): number {\r\n        return utility.dotArray(this.T[2], this.virtualToStandard(coord)) + this.B[2];\r\n    }\r\n    private _graphicalMatrix = [0,0,0];\r\n    private virtualToGraphical(virCoord: number[]):number[]{\r\n            this._graphicalMatrix[0] = this.X(...virCoord);\r\n            this._graphicalMatrix[1] = this.Y(...virCoord);\r\n            this._graphicalMatrix[2] = this.Z(...virCoord);\r\n        return this._graphicalMatrix;\r\n    }\r\n    /**\r\n     * The Width, expressed either in a vector or a single number computed from width\r\n     * @param width the width in virtual coordinates for conversion\r\n     * @param getElement the method returns a single component if the value is set to true\r\n     * or else it returns an array that corresponds to the spatial distance in graphics coordinate\r\n     */\r\n    public Width(width: number, getElement:true): number | number[] {\r\n        if(getElement){\r\n            return this.X(width,0,0)-this.X(0,0,0);\r\n        }else{\r\n            return (utility.subtract(this.virtualToGraphical([width, 0, 0]).slice(), this.virtualToGraphical([width, 0, 0])) as number[]);\r\n        }\r\n    }\r\n    /**\r\n     * The Height, expressed either in a vector or a single number computed from height\r\n     * @param height the height in virtual coordinates for conversion\r\n     * @param getElement the method returns a single component if the value is set to true\r\n     * or else it returns an array that corresponds to the spatial distance in graphics coordinate\r\n     */\r\n    public Height(height: number, getElement: true): number | number[] {\r\n        if (getElement) {\r\n            return this.Y(0, height, 0) - this.Y(0, 0, 0);\r\n        } else {\r\n            return (utility.subtract(this.virtualToGraphical([0, height, 0]).slice(), this.virtualToGraphical([0, height, 0])) as number[]);\r\n        }\r\n    }\r\n    /**\r\n     * The Length, expressed either in a vector or a single number computed from length\r\n     * @param height the length in virtual coordinates for conversion\r\n     * @param getElement the method returns a single component if the value is set to true\r\n     * or else it returns an array that corresponds to the spatial distance in graphics coordinate\r\n     */\r\n    public Length(length: number, getElement: true): number | number[] {\r\n        if (getElement) {\r\n            return this.Z(0, 0, length) - this.Z(0, 0, 0);\r\n        } else {\r\n            return (utility.subtract(this.virtualToGraphical([0, 0, length]).slice(), this.virtualToGraphical([0, 0, length])) as number[]);\r\n        }\r\n    }\r\n    private _subtractionMatrix = [0, 0, 0];\r\n    /**\r\n     * Returns a vector representing the virtual coordinate of graph coord.\r\n     * The Locator class only exposes this method because the reverse transform \r\n     * involves matrix transformation and cloning arrays. It's the fastest to not \r\n     * repeat the process for each component.\r\n     * @param graCoord: a representation of a point in the virtual coordinate\r\n     */\r\n    public xyz(...graCoord: number[]): number[] {\r\n        this.checkCoord(graCoord);\r\n        this._subtractionMatrix = (utility.subtract([...graCoord], this.B) as number[]);\r\n        this._standardMatrix[0] = utility.dotArray(this.T[0], this._subtractionMatrix);\r\n        this._standardMatrix[1] = utility.dotArray(this.T[1], this._subtractionMatrix);\r\n        this._standardMatrix[2] = utility.dotArray(this.T[2], this._subtractionMatrix);\r\n        /* _subtractionMatrix is reused here as a holder for the _virtualMatrix for the sake of \r\n         * optimization.\r\n         */\r\n        this._subtractionMatrix[0] = this._standardMatrix[0] / this.scalex - this.deltax;\r\n        this._subtractionMatrix[1] = this._standardMatrix[1] / this.scaley - this.deltay;\r\n        this._subtractionMatrix[2] = this._standardMatrix[2] / this.scalez - this.deltaz;\r\n        return this._subtractionMatrix;\r\n    }\r\n    // Unimplemented until they are needed\r\n    // public float width(int Width) {\r\n    //     return x(Width, 0) - x(0, 0);\r\n    // }\r\n    // public float height(int Height) {\r\n    //     return y(0, Height) - y(0, 0);\r\n    // }\r\n    // public float length(int Length) {\r\n    //     return z(0,0,Length) - this.Z(0,0,0);\r\n    // }\r\n\r\n    /**\r\n     * Pinned zooming\r\n     * @param pinX In graphical units\r\n     * @param factorx Scale scalex by this amount\r\n     * @param pinY In graphical units\r\n     * @param factory Scale scaley by this amount\r\n     * @param pinZ In graphical units\r\n     * @param factorz Scale scalez by this amount\r\n     */\r\n    public zoom(pinX: number, factorx: number, pinY: number, factory: number, pinZ = 0, factorz = 1):void{\r\n        let pinxyz = this.xyz(pinX, pinY, pinZ);\r\n        this.scalex *= factorx;\r\n        this.scaley *= factory;\r\n        this.scalez *= factorz;\r\n        this.deltax = (pinxyz[0] + this.deltax) / factorx - pinxyz[0];\r\n        this.deltay = (pinxyz[1] + this.deltay) / factory - pinxyz[1];\r\n        this.deltaz = (pinxyz[2] + this.deltaz) / factory - pinxyz[2];\r\n    }\r\n    /**\r\n     * Validate that the coordinate has the coorect dimension\r\n     * @param coord the coordinate\r\n     */\r\n    private checkCoord(coord:number[]):number[]{\r\n        if (coord.length == 2) coord[2] = 0;\r\n        return coord;\r\n    }\r\n}\r\nexports={\r\n    Locator\r\n}"],"file":"locator.js"}